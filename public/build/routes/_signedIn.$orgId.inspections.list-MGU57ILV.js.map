{
  "version": 3,
  "sources": ["../../../app/routes/_signedIn.$orgId.inspections.list.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_signedIn.$orgId.inspections.list.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_signedIn.$orgId.inspections.list.tsx\");\n  import.meta.hot.lastModified = \"1706454925358.5217\";\n}\n// REMIX HMR END\n\nimport { useNavigate, useOutletContext, useSubmit } from '@remix-run/react';\nimport { Icon } from '~/components/ui/Icon';\nimport { Table } from '~/components/ui/Table';\nimport { secondaryText, tableHeader } from '~/styles/typography';\nimport { deleteInspectionInstance } from '~/endpoints/inspectionInstance';\nimport { CheckBox } from '~/components/ui/Checkbox';\nimport { useState } from 'react';\nimport { DropdownMenu } from '~/components/ui/DropdownMenu';\nimport { TableSelectBottomBar } from '~/components/ui/TableSelectBottomBar';\nimport Button from '~/components/ui/Button';\nimport { getInspectionInstanceStatusChip } from '~/utils/getInpectionInstanceStatusChip';\nimport Alert from '~/components/ui/Alert';\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const action = formData.get('_action');\n  switch (action) {\n    case 'deleteInspectionInstance':\n      const inspectionInstanceId = formData.get('inspectionInstanceId');\n      if (inspectionInstanceId) {\n        return await deleteInspectionInstance({\n          inspectionId: parseInt(inspectionInstanceId)\n        });\n      }\n      break;\n    case 'deleteManyInspectionInstances':\n      const inspectionInstanceIds = formData.get('inspectionInstanceIds');\n      return Promise.all(inspectionInstanceIds.split('\u00A3').map(async inspectionId => {\n        return await deleteInspectionInstance({\n          inspectionId: parseInt(inspectionId)\n        });\n      }));\n    default:\n      return null;\n  }\n}\nexport default function InspectionList() {\n  _s();\n  const {\n    inspections,\n    inspectionManageRole,\n    orgId\n  } = useOutletContext();\n  const [selectAll, setSelectAll] = useState(false);\n  const [selectedRowsId, setSelectedRowsId] = useState([]);\n  const submit = useSubmit();\n  const [displayAlert, setDisplayAlert] = useState(false);\n  const navigation = useNavigate();\n  const headers = [inspectionManageRole ? <CheckBox key=\"selectAllCheckbox\" uniqueName={'all'} checked={selectAll} onChange={value => {\n    setSelectAll(value);\n    setSelectedRowsId(value ? inspections.map(row => {\n      return row.id;\n    }) : []);\n  }} /> : <div key=\"emptyDiv\" />, <div key=\"inspectionReferenceHeader\" className={`${tableHeader}`}>\n      Inspection Reference\n    </div>, <div key=\"idHeader\" className={`${tableHeader}`}>\n      ID\n    </div>, <div key=\"assetHeader\" className={`${tableHeader}`}>\n      Asset\n    </div>, <div key=\"statusHeader\" className={`${tableHeader}`}>\n      Status\n    </div>, <div key=\"categoryHeader\" className={`${tableHeader}`}>\n      Category\n    </div>, <div key=\"lastUpdateHeader\" className={`${tableHeader}`}>\n      Last Update\n    </div>, <div key=\"createdHeader\" className={`${tableHeader}`}>\n      Created\n    </div>, <div key=\"startedHeader\" className={`${tableHeader}`}>\n      Started\n    </div>, <div key=\"completedHeader\" className={`${tableHeader}`}>\n      Completed\n    </div>];\n  const dateOptions = {\n    hour: '2-digit',\n    minute: '2-digit',\n    day: '2-digit',\n    month: '2-digit',\n    year: '2-digit'\n  };\n  const rowsToDisplay = inspections.map(inspection => {\n    const formattedUpdatedByName = inspection.updatedBy.firstName || inspection.updatedBy.lastName ? (inspection.updatedBy.firstName !== null ? inspection.updatedBy.firstName : '') + ' ' + (inspection.updatedBy.lastName !== null ? inspection.updatedBy.lastName : '') : inspection.updatedBy.email;\n    const formattedCreatedByName = inspection.createdBy.firstName || inspection.createdBy.lastName ? (inspection.createdBy.firstName !== null ? inspection.createdBy.firstName : '') + ' ' + (inspection.createdBy.lastName !== null ? inspection.createdBy.lastName : '') : inspection.createdBy.email;\n    const formattedStartedByName = inspection.startedBy ? inspection.startedBy.firstName || inspection.startedBy.lastName ? (inspection.startedBy.firstName !== null ? inspection.startedBy.firstName : '') + ' ' + (inspection.startedBy.lastName !== null ? inspection.startedBy.lastName : '') : inspection.startedBy.email : undefined;\n    const formattedCompletedByName = inspection.completedBy ? inspection.completedBy.firstName || inspection.completedBy.lastName ? (inspection.completedBy.firstName !== null ? inspection.completedBy.firstName : '') + ' ' + (inspection.completedBy.lastName !== null ? inspection.completedBy.lastName : '') : inspection.completedBy.email : undefined;\n    return {\n      onClick: () => {\n        switch (inspection.Status) {\n          case 'SCHEDULED':\n            navigation('/' + orgId + '/' + inspection.id + '/unstartedInspectionInstance');\n            break;\n          case 'STARTED':\n            navigation('/' + orgId + '/' + inspection.id + '/doingInspectionInstance');\n            break;\n          default:\n            break;\n        }\n      },\n      content: [{\n        content: inspectionManageRole ? <CheckBox uniqueName={'all'} checked={selectedRowsId.includes(inspection.id)} onChange={() => {\n          setSelectedRowsId(currentSelectedInspections => {\n            setSelectAll(false);\n            if (selectedRowsId.includes(inspection.id)) {\n              return currentSelectedInspections.filter(selectedAssetId => selectedAssetId !== inspection.id);\n            } else {\n              return [...currentSelectedInspections, inspection.id];\n            }\n          });\n        }} /> : <div />\n      }, {\n        content: <div>{inspection.inspectionReference}</div>\n      }, {\n        content: <div>{inspection.InspectionOrgUniqueId}</div>\n      }, {\n        content: <div>\n              {inspection.asset?.properties.find(property => property.categoryProperty.label === 'Asset Name')?.stringValue}\n            </div>\n      }, {\n        content: getInspectionInstanceStatusChip(inspection.Status)\n      }, {\n        content: <div>{inspection.inspectionForm.name}</div>\n      }, {\n        content: <div className=\"flex\">\n              <div className=\"pr-2\">{formattedUpdatedByName}</div>\n              <div className={`${secondaryText}`}>\n                {new Date(inspection.updatedAt ?? '').toLocaleString('en-GB', dateOptions)}\n              </div>\n            </div>\n      }, {\n        content: <div className=\"flex\">\n              <div className=\"pr-2\">{formattedCreatedByName}</div>\n              <div className={`${secondaryText}`}>\n                {new Date(inspection.createdAt ?? '').toLocaleString('en-GB', dateOptions)}\n              </div>\n            </div>\n      }, {\n        content: <>\n              {formattedStartedByName && <div className=\"flex\">\n                  <div className=\"pr-2\">{formattedStartedByName}</div>\n                  <div className={`${secondaryText}`}>\n                    {new Date(inspection.startedAt ?? '').toLocaleString('en-GB', dateOptions)}\n                  </div>\n                </div>}\n            </>\n      }, {\n        content: <>\n              {formattedCompletedByName && <div className=\"flex\">\n                  <div className=\"pr-2\">{formattedCompletedByName}</div>\n                  <div className={`${secondaryText}`}>\n                    {new Date(inspection.completedAt ?? '').toLocaleString('en-GB', dateOptions)}\n                  </div>\n                </div>}\n            </>\n      }, {\n        content: inspectionManageRole ? <DropdownMenu triggerClassName=\"w-7\" trigger={<Icon className=\"w-7\" onClick={() => {}} icon=\"threeDotsVertical\" />} dropdownMenuContent={[{\n          displayText: <div className=\"flex\">\n                      <Icon icon=\"copy\" className=\"pr-2\" />\n                      Duplicate\n                    </div>,\n          onClick: () => {\n            navigation('../../inspection/duplicate/' + inspection.id, {\n              relative: 'path'\n            });\n          }\n        }, {\n          displayText: <div className=\"flex\">\n                      <Icon icon=\"bin\" className=\"pr-2\" />\n                      Delete\n                    </div>,\n          onClick: () => {\n            const formData = new FormData();\n            formData.set('_action', 'deleteInspectionInstance');\n            formData.set('inspectionInstanceId', inspection.id.toString());\n            submit(formData, {\n              method: 'post'\n            });\n          }\n        }, {\n          displayText: <div className=\"flex\">\n                      <Icon icon=\"share\" className=\"pr-2\" />\n                      Share\n                    </div>,\n          onClick: () => {\n            const pureUrl = window.location.href.replace('inspections/list', '');\n            switch (inspection.Status) {\n              case 'SCHEDULED':\n                navigator.clipboard.writeText(pureUrl + inspection.id + '/unstartedInspectionInstance');\n                break;\n              case 'STARTED':\n                navigator.clipboard.writeText(pureUrl + inspection.id + '/doingInspectionInstance');\n                break;\n              default:\n                break;\n            }\n            setDisplayAlert(true);\n            setTimeout(() => setDisplayAlert(false), 5000);\n          }\n        }]} /> : <div />\n      }]\n    };\n  });\n  return <>\n      {displayAlert && <Alert variant=\"default\" title={'Copied Link To Clipboard'} onClose={() => {\n      setDisplayAlert(false);\n    }} />}\n      <Table headers={headers} rows={rowsToDisplay} />\n      {selectedRowsId.length > 0 && <TableSelectBottomBar numberSelected={selectedRowsId.length}>\n          <div className=\" p-2\">\n            <Button variant=\"outline\" onClick={() => {\n          const formData = new FormData();\n          formData.set('_action', 'deleteManyInspectionInstances');\n          formData.set('inspectionInstanceIds', selectedRowsId.join('\u00A3'));\n          submit(formData, {\n            method: 'post'\n          });\n          setSelectedRowsId([]);\n        }}>\n              <Icon icon=\"bin\" className=\"pr-2\" />\n              Delete\n            </Button>\n          </div>\n        </TableSelectBottomBar>}\n    </>;\n}\n_s(InspectionList, \"kpQAlECHRo7P1XWWJTD/fzd47hQ=\", false, function () {\n  return [useOutletContext, useSubmit, useNavigate];\n});\n_c = InspectionList;\nvar _c;\n$RefreshReg$(_c, \"InspectionList\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "_c"]
}
