{
  "version": 3,
  "sources": ["../../../app/routes/_signedIn.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_signedIn.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_signedIn.tsx\");\n  import.meta.hot.lastModified = \"1706454925362.472\";\n}\n// REMIX HMR END\n\nimport { redirect } from '@remix-run/node';\nimport { Outlet, useLoaderData } from '@remix-run/react';\nimport { Layout } from '~/components/ui/Layout';\nimport { getSession } from '~/cookies';\nimport { getUserId } from '~/endpoints/user';\nimport Account from '../assets/account.svg';\nimport { getStorage } from '~/utils/storage.server';\nimport { getOrganisation } from '~/endpoints/organisation';\nexport const loader = async ({\n  request,\n  params\n}) => {\n  const session = await getSession(request.headers.get('Cookie'));\n  const userId = session.get('userId');\n  const currentUser = await getUserId(userId ?? -1);\n  if (userId) {\n    const loggedInUser = await getUserId(userId);\n    const organisation = params.orgId ? await getOrganisation(parseInt(params.orgId ?? '-1')) : undefined;\n    if (loggedInUser) {\n      //get image\n      let imageUrl;\n      if (currentUser?.image) {\n        const imageName = currentUser?.image ?? '';\n        const storageClient = getStorage();\n        const profilePicUrlObject = storageClient.from('assetnest').getPublicUrl('profile-picture/' + imageName) ?? '';\n        imageUrl = profilePicUrlObject?.data?.publicUrl ?? '';\n      }\n\n      // Get the public URL of the organisation icon from the storage client.\n      let orgImageUrl;\n      if (organisation?.icon) {\n        const imageName = organisation?.icon ?? '';\n        const storageClient = getStorage();\n        const orgPicUrlObject = storageClient.from('assetnest').getPublicUrl('organisations/' + imageName) ?? '';\n        orgImageUrl = orgPicUrlObject?.data?.publicUrl ?? '';\n      }\n      return {\n        firstName: currentUser?.firstName ?? '',\n        lastName: currentUser?.lastName ?? '',\n        profileImage: imageUrl,\n        organisationName: organisation?.name ?? '',\n        organisationIcon: orgImageUrl\n      };\n    } else {\n      return redirect(`/logIn`);\n    }\n  }\n  return redirect(`/logIn`);\n};\nexport function shouldRevalidate({\n  currentParams,\n  nextParams,\n  defaultShouldRevalidate\n}) {\n  if (currentParams.orgId !== nextParams.orgId) {\n    return true;\n  }\n  return defaultShouldRevalidate;\n}\nconst SignedIn = () => {\n  _s();\n  const loaderData = useLoaderData();\n  const profileInitials = (loaderData?.firstName?.at(0)?.toUpperCase() ?? '') + (loaderData?.lastName?.at(0)?.toUpperCase() ?? '');\n  return <Layout profileInitials={profileInitials === '' ? undefined : profileInitials} profileImage={loaderData?.profileImage ? loaderData?.profileImage : profileInitials === '' ? Account : profileInitials} organisationName={loaderData?.organisationName} organisationIcon={loaderData?.organisationIcon}>\n      <Outlet />\n    </Layout>;\n};\n_s(SignedIn, \"UGd6Srho9ZIz3WBO/oX8v/JIOKQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = SignedIn;\nexport default SignedIn;\nvar _c;\n$RefreshReg$(_c, \"SignedIn\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAyB;;;;;;AAMzB,qBAA2B;AA0DrB;AApFN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,+BAAiC,EAAE;AAAA,EAC5E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA0B;AAC1B,cAAY,IAAI,eAAe;AACjC;AAoDO,SAAS,iBAAiB;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,MAAI,cAAc,UAAU,WAAW,OAAO;AAC5C,WAAO;AAAA,EACT;AACA,SAAO;AACT;AACA,IAAM,WAAW,MAAM;AAhFvB,cAAAA,KAAA;AAiFE,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,oBAAmBA,OAAA,oDAAY,cAAZ,mBAAuB,GAAG,OAA1B,mBAA8B,kBAA9B,OAAAA,MAA+C,QAAO,0DAAY,aAAZ,mBAAsB,GAAG,OAAzB,mBAA6B,kBAA7B,YAA8C;AAC7H,SAAO,mDAAC,UAAO,iBAAiB,oBAAoB,KAAK,SAAY,iBAAiB,eAAc,yCAAY,gBAAe,yCAAY,eAAe,oBAAoB,KAAK,kBAAU,iBAAiB,kBAAkB,yCAAY,kBAAkB,kBAAkB,yCAAY,kBACxR,6DAAC,YAAD;AAAA;AAAA;AAAA;AAAA,SAAQ,KADL;AAAA;AAAA;AAAA;AAAA,SAEL;AACJ;AACA,GAAG,UAAU,gCAAgC,OAAO,WAAY;AAC9D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAO,mBAAQ;AACf,IAAI;AACJ,aAAa,IAAI,UAAU;AAE3B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["_c"]
}
