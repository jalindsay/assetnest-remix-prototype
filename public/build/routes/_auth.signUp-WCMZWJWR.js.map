{
  "version": 3,
  "sources": ["../../../app/routes/_auth.signUp.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth.signUp.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth.signUp.tsx\");\n  import.meta.hot.lastModified = \"1706454922355.3281\";\n}\n// REMIX HMR END\n\nimport { Card } from '~/components/ui/Card';\nimport AssetNestLogo from '~/assets/Logos/AssetNestLogoDark.svg';\nimport { TextInput } from '~/components/ui/TextInput';\nimport { useState } from 'react';\nimport Button from '~/components/ui/Button';\nimport { Form, Link, useActionData } from '@remix-run/react';\nimport { redirect } from '@remix-run/node';\nimport { emailValid } from '~/utils/emailValidator';\nimport { passwordValid } from '~/utils/passwordValidator';\nimport { generatePasswordHash } from '~/utils/passwordHashing.server';\nimport { createUser, getUserEmail } from '~/endpoints/user';\nimport { commitSession, getSession } from '~/cookies';\nexport async function action({\n  request\n}) {\n  const body = await request.formData();\n  const email = body.get('email') ?? '';\n  const password = body.get('password') ?? '';\n  const repeatPassword = body.get('repeatPassword') ?? '';\n  let emailError = '';\n  let passwordError = '';\n  let repeatPasswordError = '';\n  const emailAlreadyUsed = await getUserEmail(email);\n  if (email.length === 0) {\n    emailError = 'A email is required';\n  } else if (!emailValid(email ?? '')) {\n    emailError = 'Enter a valid email';\n  } else if (emailAlreadyUsed) {\n    emailError = 'Email already in use';\n  }\n  if (password.length === 0) {\n    passwordError = 'A password is required';\n  } else if (!passwordValid(password)) {\n    passwordError = 'Passwords must contain at least 12 characters';\n  }\n  if (repeatPassword.length === 0) {\n    repeatPasswordError = 'A repeat password is required';\n  } else if (repeatPassword !== password) {\n    repeatPasswordError = 'Passwords do not match';\n  }\n  if (emailError || passwordError || repeatPasswordError) {\n    return {\n      email: emailError,\n      password: passwordError,\n      repeatPassword: repeatPasswordError\n    };\n  }\n  const passwordHash = await generatePasswordHash(password);\n  const inviteToken = await createUser({\n    email: email,\n    passwordHash: passwordHash\n  });\n  const session = await getSession(request.headers.get('Cookie'));\n  session.flash('signUpFlash', {\n    email,\n    inviteToken\n  });\n  return redirect('/logIn', {\n    headers: {\n      'Set-Cookie': await commitSession(session)\n    }\n  });\n}\nconst Index = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [repeatPassword, setRepeatPassword] = useState('');\n  const actionData = useActionData();\n  return <Card>\n      <div className=\"flex w-full flex-col\">\n        <img className=\"p-4\" src={AssetNestLogo} alt={'assetnest logo'} />\n        <h1 className={' text-l text-brand_Teal p-1 text-center font-bold'}>\n          Create your account\n        </h1>\n        <Form method=\"post\">\n          <div>\n            <TextInput name={'email'} onChange={value => {\n            setEmail(value);\n          }} value={email} placeholder=\"Email\" label=\"Email\" error={!!actionData?.email} helpText={actionData?.email} />\n            <TextInput name={'password'} onChange={value => {\n            setPassword(value);\n          }} value={password} placeholder=\"Password\" label=\"Password\" password error={!!actionData?.password} helpText={actionData?.password} />\n            <TextInput name={'repeatPassword'} onChange={value => {\n            setRepeatPassword(value);\n          }} value={repeatPassword} placeholder=\"Repeat Password\" label=\"Repeat Password\" password error={!!actionData?.repeatPassword} helpText={actionData?.repeatPassword} />\n            <div className=\"p-1 pt-4\">\n              <div className=\"p-1\">\n                <Button className=\"w-full\" submit variant=\"default\">\n                  Create Account\n                </Button>\n              </div>\n              <div className=\"p-1\">\n                Already Have a Account?{' '}\n                <Link className=\" text-primary underline hover:text-primaryHover\" to=\"/login\">\n                  Login\n                </Link>\n              </div>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </Card>;\n};\n_s(Index, \"ioKSXfhJpM6PGZKSAD+OeLgYL94=\", false, function () {\n  return [useActionData];\n});\n_c = Index;\nexport default Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
