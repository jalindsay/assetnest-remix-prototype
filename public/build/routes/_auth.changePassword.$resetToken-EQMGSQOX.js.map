{
  "version": 3,
  "sources": ["../../../app/routes/_auth.changePassword.$resetToken.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth.changePassword.$resetToken.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth.changePassword.$resetToken.tsx\");\n  import.meta.hot.lastModified = \"1706454925349.8062\";\n}\n// REMIX HMR END\n\nimport { redirect } from '@remix-run/node';\nimport { Form, useActionData } from '@remix-run/react';\nimport { useState } from 'react';\nimport Button from '~/components/ui/Button';\nimport { Card } from '~/components/ui/Card';\nimport { TextInput } from '~/components/ui/TextInput';\nimport { commitSession, getSession } from '~/cookies';\nimport { getUserPasswordResetToken, updateUser } from '~/endpoints/user';\nimport { generatePasswordHash } from '~/utils/passwordHashing.server';\nimport { passwordValid } from '~/utils/passwordValidator';\nexport async function action({\n  request,\n  params\n}) {\n  const body = await request.formData();\n  const session = await getSession(request.headers.get('Cookie'));\n  const newPassword = body.get('newPassword');\n  const newPasswordRepeat = body.get('newPasswordRepeat');\n  let newPasswordError = '';\n  let newPasswordRepeatError = '';\n  if (newPassword.length === 0) {\n    newPasswordError = 'This field is required';\n  } else if (!passwordValid(newPassword)) {\n    newPasswordError = 'Passwords must contain at least 12 characters';\n  }\n  if (newPasswordRepeat.length === 0) {\n    newPasswordRepeatError = 'This field is required';\n  } else if (newPasswordRepeat !== newPassword) {\n    newPasswordRepeatError = 'New Passwords must match';\n  }\n  if (newPasswordError || newPasswordRepeatError) {\n    return {\n      newPassword: newPasswordError,\n      newPasswordRepeat: newPasswordRepeatError\n    };\n  }\n  const newPasswordHash = await generatePasswordHash(newPassword);\n  const user = await getUserPasswordResetToken(params.resetToken ?? '');\n  await updateUser({\n    userId: user?.id ?? -1,\n    passwordHash: newPasswordHash,\n    passwordResetExpireDate: new Date()\n  });\n  session.flash('resetPasswordFlash', true);\n  return redirect('/logIn', {\n    headers: {\n      'Set-Cookie': await commitSession(session)\n    }\n  });\n}\nexport const loader = async ({\n  params\n}) => {\n  const user = await getUserPasswordResetToken(params.resetToken ?? '');\n  if (user?.passwordResetExpireDate && user.passwordResetExpireDate > new Date()) {\n    return null;\n  }\n  return redirect(`/login`);\n};\nexport default function Profile() {\n  _s();\n  const [newPassword, setNewPassword] = useState('');\n  const [newPasswordRepeat, setNewPasswordRepeat] = useState('');\n  const actionData = useActionData();\n  return <Card>\n      <div className=\"flex w-full flex-col sm:w-96\">\n        <h1 className={' text-l text-brand_Teal p-1 text-center font-bold'}>\n          Reset Your Password\n        </h1>\n        <Form method=\"post\">\n          <div className=\"p-1\">\n            <TextInput name={'newPassword'} onChange={value => {\n            setNewPassword(value);\n          }} value={newPassword} placeholder=\"New Password\" label=\"New Password\" helpText={actionData?.newPassword ?? ''} error={!!actionData?.newPassword} password />\n            <TextInput name={'newPasswordRepeat'} onChange={value => {\n            setNewPasswordRepeat(value);\n          }} value={newPasswordRepeat} placeholder=\"Confirm New Password\" label=\"Confirm New Password\" helpText={actionData?.newPasswordRepeat ?? ''} error={!!actionData?.newPasswordRepeat} password />\n          </div>\n          <div className=\" flex w-full justify-center self-center p-3\">\n            <Button submit className=\"w-full\" onClick={() => {}}>\n              Confirm\n            </Button>\n          </div>\n        </Form>\n      </div>\n    </Card>;\n}\n_s(Profile, \"uwVejEynxV/vChbcUTatKaOaL+I=\", false, function () {\n  return [useActionData];\n});\n_c = Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAyB;AAEzB,IAAAA,gBAAyB;AAMzB,6BAAqC;AA0D7B;AAtFR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,sDAAwD,EAAE;AAAA,EACnG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAiD;AACjD,cAAY,IAAI,eAAe;AACjC;AA8De,SAAR,UAA2B;AAhFlC;AAiFE,KAAG;AACH,QAAM,CAAC,aAAa,cAAc,QAAI,wBAAS,EAAE;AACjD,QAAM,CAAC,mBAAmB,oBAAoB,QAAI,wBAAS,EAAE;AAC7D,QAAM,aAAa,cAAc;AACjC,SAAO,mDAAC,QACJ,6DAAC,SAAI,WAAU,gCACb;AAAA,uDAAC,QAAG,WAAW,qDAAqD,mCAApE;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,SAAI,WAAU,OACb;AAAA,2DAAC,aAAU,MAAM,eAAe,UAAU,WAAS;AACnD,yBAAe,KAAK;AAAA,QACtB,GAAG,OAAO,aAAa,aAAY,gBAAe,OAAM,gBAAe,WAAU,8CAAY,gBAAZ,YAA2B,IAAI,OAAO,CAAC,EAAC,yCAAY,cAAa,UAAQ,QAFxJ;AAAA;AAAA;AAAA;AAAA,eAEyJ;AAAA,QACzJ,mDAAC,aAAU,MAAM,qBAAqB,UAAU,WAAS;AACzD,+BAAqB,KAAK;AAAA,QAC5B,GAAG,OAAO,mBAAmB,aAAY,wBAAuB,OAAM,wBAAuB,WAAU,8CAAY,sBAAZ,YAAiC,IAAI,OAAO,CAAC,EAAC,yCAAY,oBAAmB,UAAQ,QAF1L;AAAA;AAAA;AAAA;AAAA,eAE2L;AAAA,WAN7L;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA,MACA,mDAAC,SAAI,WAAU,+CACb,6DAAC,kBAAO,QAAM,MAAC,WAAU,UAAS,SAAS,MAAM;AAAA,MAAC,GAAG,uBAArD;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,SAbF;AAAA;AAAA;AAAA;AAAA,WAcA;AAAA,OAlBF;AAAA;AAAA;AAAA;AAAA,SAmBA,KApBG;AAAA;AAAA;AAAA;AAAA,SAqBL;AACJ;AACA,GAAG,SAAS,gCAAgC,OAAO,WAAY;AAC7D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,SAAS;AAE1B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react"]
}
