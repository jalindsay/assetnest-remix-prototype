{
  "version": 3,
  "sources": ["empty-module:~/utils/email.server", "../../../app/routes/_auth.logIn.tsx"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth.logIn.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth.logIn.tsx\");\n  import.meta.hot.lastModified = \"1706454925350.2136\";\n}\n// REMIX HMR END\n\nimport { Card } from '~/components/ui/Card';\nimport AssetNestLogo from '~/assets/Logos/AssetNestLogoDark.svg';\nimport { TextInput } from '~/components/ui/TextInput';\nimport { useState, useRef, useEffect } from 'react';\nimport Button from '~/components/ui/Button';\nimport { Form, useActionData, useLoaderData, useNavigate } from '@remix-run/react';\nimport { redirect, json } from '@remix-run/node';\nimport { commitSession, getSession } from '~/cookies';\nimport { emailValid } from '~/utils/emailValidator';\nimport { comparePasswords } from '~/utils/passwordHashing.server';\nimport { getUserEmail } from '~/endpoints/user';\nimport { sendEmail } from '~/utils/email.server';\nimport { Dialog } from '~/components/ui/Dialog';\nimport { Icon } from '~/components/ui/Icon';\nimport { pageTitle } from '~/styles/typography';\nimport Alert from '~/components/ui/Alert';\nexport async function action({\n  request\n}) {\n  const body = await request.formData();\n  const resendVerification = body.get('resendVerification');\n  if (resendVerification) {\n    const email = body.get('email');\n    const inviteToken = body.get('inviteToken');\n    await sendEmail([email], {\n      type: 'verifyUser',\n      inviteToken: inviteToken\n    });\n    return null;\n  }\n  const email = body.get('email');\n  const password = body.get('password');\n  let emailError = '';\n  let passwordError = '';\n  if (email.length === 0) {\n    emailError = 'A email is required';\n  } else if (!emailValid(email ?? '')) {\n    emailError = 'Enter a valid email';\n  }\n  if (password.length === 0) {\n    passwordError = 'A password is required';\n  }\n  if (emailError || passwordError) {\n    return {\n      email: emailError,\n      password: passwordError\n    };\n  }\n  const emailExistsToAUser = await getUserEmail(email);\n  const passwordsMatch = comparePasswords(password, emailExistsToAUser?.passwordHash ?? '');\n  if (!emailExistsToAUser || !passwordsMatch || !emailExistsToAUser?.verified) {\n    emailError = 'Invalid login details given';\n  }\n  if (emailExistsToAUser && !emailExistsToAUser?.verified) {\n    await sendEmail([emailExistsToAUser.email.toLowerCase()], {\n      type: 'verifyUser',\n      inviteToken: emailExistsToAUser.verifyToken ?? ''\n    });\n    emailError = 'Account is not verified. Verification email has been resent';\n  }\n  if (emailError || passwordError) {\n    return {\n      email: emailError,\n      password: passwordError,\n      verificationError: !emailExistsToAUser?.verified\n    };\n  }\n  const session = await getSession(request.headers.get('Cookie'));\n  session.set('userId', emailExistsToAUser?.id ?? -1);\n  const cookie = await commitSession(session);\n  return redirect('/organisationList', {\n    status: 302,\n    headers: {\n      'Set-Cookie': cookie\n    }\n  });\n}\nexport const loader = async ({\n  request\n}) => {\n  const session = await getSession(request.headers.get('Cookie'));\n  const signUpFlash = session.get('signUpFlash');\n  const resetPasswordFlash = session.get('resetPasswordFlash');\n  return json({\n    signUpFlash,\n    resetPasswordFlash\n  }, {\n    headers: {\n      'Set-Cookie': await commitSession(session)\n    }\n  });\n};\nexport default function Index() {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const navigation = useNavigate();\n  const loaderData = useLoaderData();\n  const [displaySignUpModel, setDisplaySignUpModel] = useState(!!loaderData?.signUpFlash);\n  const actionData = useActionData();\n  const emailResendRef = useRef(null);\n  const [displayResetPasswordFlashAlert, setDisplayResetPasswordFlashAlert] = useState(loaderData?.resetPasswordFlash ?? false);\n  useEffect(() => {\n    if (loaderData?.resetPasswordFlash) {\n      setDisplayResetPasswordFlashAlert(loaderData?.resetPasswordFlash ?? false);\n      setTimeout(() => setDisplayResetPasswordFlashAlert(false), 5000);\n    }\n  }, [loaderData?.resetPasswordFlash]);\n  return <Card>\n      <div className=\"flex w-full flex-col \">\n        {displayResetPasswordFlashAlert && <Alert variant=\"success\" title=\"Password Reset Successfully\" />}\n        <Dialog open={displaySignUpModel} onClose={() => setDisplaySignUpModel(false)}>\n          <Form method=\"post\" ref={emailResendRef} className=\"p-2\">\n            <input type=\"hidden\" name=\"resendVerification\" value={'true'} />\n            <input type=\"hidden\" name=\"email\" value={loaderData.signUpFlash?.email ?? ''} />\n            <input type=\"hidden\" name=\"inviteToken\" value={loaderData.signUpFlash?.inviteToken ?? ''} />\n            <div className=\"flex items-center justify-center p-2\">\n              <Icon icon=\"email\"></Icon>\n            </div>\n            <div className={`${pageTitle} p-2 text-center`}>\n              Verification Email Sent\n            </div>\n            <div className=\"divide-y\">\n              <div className={`p-2 text-center text-gray-500`}>\n                Please click the link in the email to activate your account. It\n                may take a few moments to arrive.\n              </div>\n              <div className={`p-4 text-center text-gray-500`}>\n                If you haven\u2019t received anything, you can{' '}\n                <span onClick={() => {\n                emailResendRef.current?.submit();\n              }} className=\" font-semibold text-gray-600 hover:cursor-pointer hover:underline  \">\n                  Resend Email\n                </span>\n              </div>\n            </div>\n          </Form>\n        </Dialog>\n        <img className=\"p-4\" src={AssetNestLogo} alt={'assetnest logo'} />\n        <h1 className={' text-l text-brand_Teal p-1 text-center font-bold'}>\n          Log in to your account\n        </h1>\n        <Form method=\"post\">\n          <div>\n            <TextInput name={'email'} onChange={value => {\n            setEmail(value);\n          }} value={email} placeholder=\"Email\" label=\"Email\" error={!!actionData?.email} helpText={actionData?.email} />\n            <TextInput name={'password'} onChange={value => {\n            setPassword(value);\n          }} value={password} placeholder=\"Password\" label=\"Password\" password error={!!actionData?.password} helpText={actionData?.password} />\n            <div className=\"px-2 text-primary\">\n              <div onClick={() => navigation('/forgotPassword')} className=\"  hover:cursor-pointer hover:underline\">\n                Forgotten your password?\n              </div>\n            </div>\n            <div className=\"w-full pt-4\">\n              <div className=\"p-1 px-2\">\n                <Button className=\"w-full\" submit variant=\"default\">\n                  Log In\n                </Button>\n              </div>\n            </div>\n            <div className=\"w-full pt-4\">\n              <div className=\"p-1 px-2\">\n                <Button className=\"w-full\" onClick={() => navigation('/signUp')} variant=\"outline\">\n                  Sign Up\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </Card>;\n}\n_s(Index, \"S2JeZoEdHx/aW88zIt8vBJgt6Ac=\", false, function () {\n  return [useNavigate, useLoaderData, useActionData];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["_c", "_a"]
}
