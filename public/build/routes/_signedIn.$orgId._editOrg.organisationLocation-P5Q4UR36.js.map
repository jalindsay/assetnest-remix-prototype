{
  "version": 3,
  "sources": ["../../../app/routes/_signedIn.$orgId._editOrg.organisationLocation.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_signedIn.$orgId._editOrg.organisationLocation.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_signedIn.$orgId._editOrg.organisationLocation.tsx\");\n  import.meta.hot.lastModified = \"1706454925354.4226\";\n}\n// REMIX HMR END\n\nimport { Form, useActionData, useLoaderData, useNavigation } from '@remix-run/react';\nimport { useEffect, useState } from 'react';\nimport Alert from '~/components/ui/Alert';\nimport Button from '~/components/ui/Button';\nimport { SelectInput } from '~/components/ui/SelectInput';\nimport { TextArea } from '~/components/ui/TextArea';\nimport { TextInput } from '~/components/ui/TextInput';\nimport { getOrganisation, updateOrganisation } from '~/endpoints/organisation';\nimport { secondaryText } from '~/styles/typography';\nimport { allCountries } from '~/utils/arrayOfAllCountries';\nexport async function action({\n  request,\n  params\n}) {\n  const body = await request.formData();\n  const streetAddress = body.get('streetAddress');\n  const city = body.get('city');\n  const country = body.get('country');\n  const postcode = body.get('postcode');\n  let result = null;\n  try {\n    result = await updateOrganisation({\n      userId: parseInt(params.userId ?? '-1'),\n      orgId: parseInt(params.orgId ?? '-1'),\n      address: streetAddress,\n      city: city,\n      country: country,\n      postcode: postcode\n    });\n  } catch (error) {\n    return {\n      success: false\n    };\n  }\n  return {\n    orgId: result?.id,\n    address: result?.address,\n    city: result?.city,\n    country: result?.country,\n    postcode: result?.postcode,\n    success: true\n  };\n}\nexport const loader = async ({\n  params\n}) => {\n  const currentOrg = await getOrganisation(parseInt(params.orgId ?? '-1'));\n  return {\n    address: currentOrg?.address,\n    city: currentOrg?.city,\n    country: currentOrg?.country,\n    postcode: currentOrg?.postcode\n  };\n};\nexport default function Location() {\n  _s();\n  const loaderData = useLoaderData();\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const [address, setAddress] = useState(loaderData?.address ?? '');\n  const [city, setCity] = useState(loaderData?.city ?? '');\n  const [country, setCountry] = useState(allCountries.find(country => country.code === loaderData.country) ?? {\n    name: '',\n    code: ''\n  });\n  const [postcode, setPostcode] = useState(loaderData?.postcode ?? '');\n  const [formChanged, setFormChanged] = useState(false);\n  const [displaySuccessAlert, setDisplaySuccessAlert] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n  const listOfCountries = allCountries.map(country => {\n    return {\n      value: country.code,\n      valueLabel: country.name\n    };\n  });\n  useEffect(() => {\n    if (actionData?.success) {\n      setSuccessMessage('Organisation Updated');\n      setDisplaySuccessAlert(true);\n      setTimeout(() => setDisplaySuccessAlert(false), 5000);\n    }\n  }, [actionData]);\n  return <div className={'flex w-full flex-col space-y-1.5 p-4 '}>\n      {displaySuccessAlert && <Alert variant=\"success\" title={successMessage} onClose={() => {\n      setDisplaySuccessAlert(false);\n    }} />}\n      <p className={`ps-2 ${secondaryText}`}>\n        Make changes to your organisation here. Click save when you're done.\n      </p>\n      <div className={'md:w-96'}>\n        <Form method=\"post\" onChange={() => setFormChanged(true)}>\n          <TextArea name=\"streetAddress\" label={'Street Address'} value={address} onChange={value => setAddress(value)} />\n          <TextInput name=\"city\" label={'City'} value={city} onChange={value => setCity(value)} />\n          <SelectInput name=\"country\" label=\"Country\" valueCurrent={country.code} onChange={newValue => {\n          setCountry(allCountries.find(country => country.code === newValue) ?? {\n            name: 'United Kingdom',\n            code: 'GB'\n          });\n        }} possibleValues={listOfCountries} />\n          <TextInput name=\"postcode\" label={'Postcode'} value={postcode} onChange={value => setPostcode(value)} />\n          <div className=\"p-2\">\n            <Button className=\"w-full\" submit={true} disabled={!formChanged}>\n              {navigation.state === 'submitting' ? 'Saving' : 'Save Changes'}\n            </Button>\n          </div>\n        </Form>\n      </div>\n    </div>;\n}\n_s(Location, \"/Ka/chwgfbx2F9mmajZafGF0V84=\", false, function () {\n  return [useLoaderData, useActionData, useNavigation];\n});\n_c = Location;\nvar _c;\n$RefreshReg$(_c, \"Location\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "_c", "country", "_a"]
}
