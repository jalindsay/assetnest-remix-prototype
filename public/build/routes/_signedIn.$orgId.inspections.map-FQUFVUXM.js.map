{
  "version": 3,
  "sources": ["../../../app/routes/_signedIn.$orgId.inspections.map.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_signedIn.$orgId.inspections.map.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_signedIn.$orgId.inspections.map.tsx\");\n  import.meta.hot.lastModified = \"1706454925358.6794\";\n}\n// REMIX HMR END\n\nimport { useLoaderData, useNavigate, useOutletContext } from '@remix-run/react';\nimport { Map } from '~/components/ui/Map';\nimport { useState } from 'react';\nimport { subPageTitle } from '~/styles/typography';\nimport { getInspectionInstanceStatusChip } from '~/utils/getInpectionInstanceStatusChip';\nimport Button from '~/components/ui/Button';\nexport async function action() {}\nexport const loader = async ({\n  params\n}) => {\n  return {\n    mapApiKey: process.env.MAP_API_KEY,\n    orgId: parseInt(params.orgId ?? '')\n  };\n};\nexport default function AssetMap() {\n  _s();\n  const {\n    inspections\n  } = useOutletContext();\n  const navigation = useNavigate();\n  const loaderData = useLoaderData();\n  const [selectedInspectionInstance, setSelectedInspectionInstance] = useState();\n  const [possibleInspectionInstances, setPossibleInspectionInstances] = useState();\n  const uniqueMarkerCoordinates = inspections.map(inspection => {\n    const lat = inspection.LocationLat;\n    const lng = inspection.LocationLng;\n    if (!lat || !lng) {\n      return undefined;\n    }\n    return {\n      lat,\n      lng,\n      onClick: () => {\n        setSelectedInspectionInstance(undefined);\n        setPossibleInspectionInstances(inspections.filter(inspection => inspection.LocationLat === lat && inspection.LocationLng === lng));\n      }\n    };\n  }).filter((valueA, index, array) => valueA !== undefined && array.findIndex(valueB => valueB?.lat === valueA.lat && valueB?.lng === valueA.lng) === index);\n  const InspectionPopUp = () => <>\n      <div className=\"flex w-full flex-col overflow-auto\">\n        {selectedInspectionInstance ? <>\n            <div className=\"p-6\">\n              <div className={`${subPageTitle} py-2`}>\n                {selectedInspectionInstance?.inspectionReference}\n              </div>\n              <div className=\"py-2\">\n                Asset :{' '}\n                <span className=\" hover: text-sky-400 hover:cursor-pointer hover:underline\" onClick={() => {\n              navigation('/' + loaderData.orgId + '/' + selectedInspectionInstance?.asset?.id + '/viewAsset');\n            }}>\n                  {selectedInspectionInstance?.asset?.properties.find(property => property.categoryProperty.label === 'Asset Name')?.stringValue ?? ''}\n                </span>\n              </div>\n              <div className=\"py-2\">\n                {getInspectionInstanceStatusChip(selectedInspectionInstance.Status)}\n              </div>\n              <Button className=\"w-full py-2\" onClick={() => {\n            switch (selectedInspectionInstance.Status) {\n              case 'SCHEDULED':\n                navigation('/' + loaderData.orgId + '/' + selectedInspectionInstance.id + '/unstartedInspectionInstance');\n                break;\n              case 'STARTED':\n                navigation('/' + loaderData.orgId + '/' + selectedInspectionInstance.id + '/doingInspectionInstance');\n                break;\n              default:\n                break;\n            }\n          }}>\n                See Full Inspection Details\n              </Button>\n            </div>\n          </> : possibleInspectionInstances?.map((inspectionInstance, index) => <div key={index} className=\"border border-border  p-2 hover:cursor-pointer hover:bg-authBackground\" onClick={() => {\n        setSelectedInspectionInstance(inspectionInstance);\n      }}>\n              {inspectionInstance.inspectionReference}\n            </div>)}\n      </div>\n    </>;\n  return <>\n      <div className={`flex ${selectedInspectionInstance ? 'h-[calc(85vh-430px)]' : 'h-[calc(100vh-430px)]'} w-full flex-col md:h-[calc(100vh-350px)] md:flex-row`}>\n        <Map doCluster apiKey={loaderData.mapApiKey ?? ''} markersCoordinates={uniqueMarkerCoordinates}></Map>\n\n        {(selectedInspectionInstance || possibleInspectionInstances) && <div className=\" w-96 max-md:hidden\">{<InspectionPopUp />}</div>}\n      </div>\n\n      {(selectedInspectionInstance || possibleInspectionInstances) && <div className=\" w-full  md:hidden \">{<InspectionPopUp />}</div>}\n    </>;\n}\n_s(AssetMap, \"Ic9wBObSivdyt8sBOGFReMG0RWE=\", false, function () {\n  return [useOutletContext, useNavigate, useLoaderData];\n});\n_c = AssetMap;\nvar _c;\n$RefreshReg$(_c, \"AssetMap\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "inspection", "_a", "_c"]
}
