{
  "version": 3,
  "sources": ["../../../app/routes/_signedIn.profile.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_signedIn.profile.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_signedIn.profile.tsx\");\n  import.meta.hot.lastModified = \"1706454925362.3398\";\n}\n// REMIX HMR END\n\nimport { Form, Link, useActionData, useLoaderData, useNavigation, useSubmit } from '@remix-run/react';\nimport { useEffect, useRef, useState } from 'react';\nimport Alert from '~/components/ui/Alert';\nimport { Avatar } from '~/components/ui/Avatar';\nimport Button from '~/components/ui/Button';\nimport { TextInput } from '~/components/ui/TextInput';\nimport { getSession } from '~/cookies';\nimport { createChangeEmailLog } from '~/endpoints/emailChangeLog';\nimport { getUserEmail, getUserId, updateUser } from '~/endpoints/user';\nimport { emailValid } from '~/utils/emailValidator';\nimport { comparePasswords } from '~/utils/passwordHashing.server';\nimport { v4 as uuidv4 } from 'uuid';\nimport SignatureCanvas from 'react-signature-canvas';\nimport { getStorage } from '~/utils/storage.server';\nimport { resizeImage } from '~/utils/resizeImage.server';\nimport { pageTitle } from '~/styles/typography';\nexport async function action({\n  request\n}) {\n  const body = await request.formData();\n  const formType = body.get('_action');\n  const firstName = body.get('firstName');\n  const lastName = body.get('lastName');\n  const email = body.get('email');\n  const password = body.get('password');\n  const session = await getSession(request.headers.get('Cookie'));\n  const userId = session.get('userId');\n  const imageData = body.get('imageData');\n  let signatureData = body.get('signatureData');\n  let imageUuid = undefined;\n  let signatureUuid = undefined;\n  const storageClient = getStorage();\n  if (formType === 'removeImage') {\n    await updateUser({\n      userId: userId ?? -1,\n      image: ''\n    });\n    return {\n      success: new Date().getUTCMilliseconds()\n    };\n  }\n  const user = await getUserId(userId ?? -1);\n  let updateEmailError = '';\n  let passwordError = '';\n  let emailUpdated = false;\n  if (user?.email !== email) {\n    const emailAlreadyUsed = await getUserEmail(email);\n    if (email.length === 0) {\n      updateEmailError = 'A email is required';\n    } else if (!emailValid(email ?? '')) {\n      updateEmailError = 'Enter a valid email';\n    } else if (emailAlreadyUsed) {\n      updateEmailError = 'Email already in use';\n    }\n    if (!password) {\n      passwordError = 'You must enter your password to change your email';\n    } else {\n      const passwordsMatch = await comparePasswords(password, user?.passwordHash ?? '');\n      if (!passwordsMatch) {\n        passwordError = 'Password is incorrect';\n      }\n    }\n    if (updateEmailError || passwordError) {\n      return {\n        email: updateEmailError,\n        password: passwordError\n      };\n    }\n    await createChangeEmailLog(userId ?? -1, email);\n    emailUpdated = true;\n  }\n\n  // Saving the profile picture\n  if (imageData !== null && imageData.size > 0) {\n    const resizedImage = await resizeImage(imageData);\n    imageUuid = uuidv4();\n    await storageClient.from('assetnest').upload('profile-picture/' + imageUuid, resizedImage);\n  }\n\n  // Saving the signature\n  if (signatureData !== null && signatureData.includes('data:image/png')) {\n    signatureData = Buffer.from(signatureData.split(',')[1], 'base64');\n    const options = {\n      type: 'image/png'\n    };\n    signatureData = new Blob([signatureData], options);\n    signatureUuid = uuidv4();\n    await storageClient.from('assetnest').upload('signature/' + signatureUuid, signatureData);\n  }\n\n  // return success action data\n  await updateUser({\n    userId: userId ?? -1,\n    firstName,\n    lastName,\n    image: imageUuid,\n    signature: signatureUuid\n  });\n  return {\n    emailSuccess: emailUpdated && new Date().getUTCMilliseconds(),\n    success: new Date().getUTCMilliseconds()\n  };\n}\nexport const loader = async ({\n  request\n}) => {\n  const storageClient = getStorage();\n  const session = await getSession(request.headers.get('Cookie'));\n  const userId = session.get('userId');\n  const currentUser = await getUserId(userId ?? -1);\n  const imageName = currentUser?.image ?? '';\n  const profilePicUrlObject = storageClient.from('assetnest').getPublicUrl('profile-picture/' + imageName) ?? '';\n  const imageUrl = profilePicUrlObject?.data?.publicUrl ?? '';\n  const signatureName = currentUser?.signature ?? '';\n  const signatureUrlData = storageClient.from('assetnest').getPublicUrl('signature/' + signatureName) ?? '';\n  let signatureUrl = signatureUrlData?.data?.publicUrl ?? '';\n  const fileName = signatureUrl.split('signature/')[1];\n  if (!fileName) {\n    signatureUrl = '';\n  }\n  return {\n    email: currentUser?.email,\n    firstName: currentUser?.firstName,\n    lastName: currentUser?.lastName,\n    imageName: currentUser?.image,\n    image: imageUrl,\n    signatureName: currentUser?.signature,\n    signature: signatureUrl\n  };\n};\nexport default function Profile() {\n  _s();\n  const navigation = useNavigation();\n  const sigCanvas = useRef(null);\n  const loaderData = useLoaderData();\n  const actionData = useActionData();\n  const [displaySuccessAlert, setDisplaySuccessAlert] = useState(false);\n  const [firstName, setFirstName] = useState(loaderData?.firstName ?? '');\n  const [lastName, setLastName] = useState(loaderData?.lastName ?? '');\n  const [fileName] = useState(loaderData?.imageName ?? '');\n  const [email, setEmail] = useState(loaderData?.email ?? '');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [image, setImage] = useState(loaderData?.image ?? '');\n  const [openCanvas, setOpenCanvas] = useState(false);\n  const [signatureFileName] = useState(loaderData?.signatureName ?? '');\n  const [signatureImage, setSignatureImage] = useState(loaderData?.signature ?? '');\n  const [formChanged, setFormChanged] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n  const submit = useSubmit();\n  const fileInputRef = useRef(null);\n  useEffect(() => {\n    if (actionData?.emailSuccess) {\n      setSuccessMessage('Verification Email Sent');\n      setDisplaySuccessAlert(!!actionData?.emailSuccess ?? false);\n      setTimeout(() => setDisplaySuccessAlert(false), 5000);\n    } else if (actionData?.success) {\n      setSuccessMessage('Profile Saved');\n      setDisplaySuccessAlert(!!actionData?.success ?? false);\n      setTimeout(() => setDisplaySuccessAlert(false), 5000);\n    }\n  }, [actionData]);\n  const createSignature = async () => {\n    const URL = sigCanvas?.current?.getCanvas().toDataURL('image/png');\n    setSignatureImage(URL ?? '');\n    setOpenCanvas(false);\n    setFormChanged(true);\n  };\n  const initials = (loaderData?.firstName?.charAt(0) ?? '') + (loaderData?.lastName?.charAt(0) ?? '');\n  return <div className={'fixed flex w-full flex-col items-center justify-center'}>\n      <div className={'fixed h-full w-full self-start overflow-scroll p-5'}>\n        <h1 className={`${pageTitle} p-4`}>My Profile</h1>\n        {displaySuccessAlert && <Alert variant=\"success\" title={successMessage} onClose={() => {\n        setDisplaySuccessAlert(false);\n      }} />}\n        <div className=\"flex w-full flex-col p-2 pb-12 md:w-96\">\n          <Form method=\"post\" encType=\"multipart/form-data\" onChange={() => setFormChanged(true)} onSubmit={() => setDisplaySuccessAlert(false)}>\n            <div>\n              <div className=\"flex w-full flex-grow\">\n                <label htmlFor=\"file\" className=\"w-full flex-grow\">\n                  <div className=\"flex w-full flex-grow justify-start px-2 py-4\">\n                    <Avatar fallbackText={initials} imageSrc={image} imageAltText=\"avatar\" className=\"z-10 flex h-36 w-36 cursor-pointer items-center justify-center rounded-xl bg-primary text-6xl text-white\" />\n                  </div>\n                </label>\n                <div className=\"flex w-full flex-col justify-center pl-2\">\n                  <Button className=\"mb-4 p-2 text-red-500\" variant=\"outline\" onClick={() => {\n                  setImage('');\n                  const formData = new FormData();\n                  formData.set('_action', 'removeImage');\n                  submit(formData, {\n                    method: 'post'\n                  });\n                }}>\n                    Remove Image\n                  </Button>\n                  <Button variant=\"outline\" isPopoverTrigger={true} className=\"w-full p-2\" onClick={() => {\n                  // Using a htmlFor label to trigger the file input doesn't work because of the onClick event in the button.\n                  // This is a workaround that uses a reference to the file input and triggers a click event on it.\n                  if (fileInputRef.current) {\n                    ;\n                    fileInputRef.current.click();\n                  }\n                }}>\n                    Change Image\n                  </Button>\n                </div>\n                <div className=\"absolute w-24\">\n                  <input ref={fileInputRef} id=\"file\" type=\"file\" accept=\".png, .jpg\" name=\"imageData\" onChange={async e => {\n                  if (e.target.files && e.target.files[0]) {\n                    setImage(URL.createObjectURL(e.target.files[0]));\n                  }\n                }} className=\"invisible h-24 w-24\" />\n                </div>\n              </div>\n              <TextInput onChange={value => {\n              if (value !== loaderData?.email) {\n                setEmail(value);\n                setShowPassword(true);\n              } else {\n                setEmail(value);\n                setPassword('');\n                setShowPassword(false);\n              }\n            }} name={'email'} value={email} placeholder=\"Email\" label=\"Email\" error={!!actionData?.email} helpText={actionData?.email} />\n              {showPassword && <TextInput onChange={value => {\n              setPassword(value);\n            }} password={true} name={'password'} value={password} placeholder=\"Password\" label=\"Confirm Password\" error={!!actionData?.password} helpText={actionData?.password} />}\n              <TextInput name={'firstName'} onChange={value => {\n              setFirstName(value);\n            }} value={firstName} placeholder=\"First Name\" label=\"First Name\" error={!!actionData?.firstName} helpText={actionData?.firstName ?? ''} />\n              <TextInput name={'lastName'} onChange={value => {\n              setLastName(value);\n            }} value={lastName} placeholder=\"Last Name\" label=\"Last Name\" error={!!actionData?.lastName} helpText={actionData?.lastName ?? ''} />\n              <input type=\"hidden\" name=\"fileName\" value={fileName}></input>\n              <input type=\"hidden\" name=\"signatureFileName\" value={signatureFileName} />\n              <input id=\"signatureData\" type=\"hidden\" name=\"signatureData\" value={signatureImage} />\n              <div className=\"flex w-full flex-col p-1\">\n                <label htmlFor={'signature'} className={'text-s pb-1 pl-1 text-left font-semibold'}>\n                  Signature\n                </label>\n                <div className=\"h-52 w-full border\" hidden={openCanvas || !signatureImage}>\n                  <img src={signatureImage} alt=\"signature\" className=\"max-h-52\" />\n                </div>\n              </div>\n              {openCanvas && <>\n                  <div className=\"m-auto h-52\">\n                    <SignatureCanvas penColor=\"black\" canvasProps={{\n                  className: 'bg-white border border-gray-300 rounded-md h-full w-full'\n                }} ref={sigCanvas} />\n                  </div>\n                  <div className=\"flex justify-center space-x-4 py-8\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => setOpenCanvas(false)}>\n                      Cancel\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => sigCanvas?.current?.clear()}>\n                      Clear\n                    </Button>\n                    <Button variant=\"default\" size=\"sm\" onClick={createSignature}>\n                      Create\n                    </Button>\n                  </div>\n                </>}\n            </div>\n            <div className=\"w-full p-1 pt-4\">\n              <div className=\"p-1\">\n                <Button className=\"w-full\" variant=\"outline\" onClick={() => setOpenCanvas(true)}>\n                  Create Signature\n                </Button>\n              </div>\n              <div className=\"p-1 pt-4\">\n                <Link to=\"/changePassword\">\n                  <Button className=\"w-full\" variant=\"outline\" onClick={() => {}}>\n                    Change Password\n                  </Button>\n                </Link>\n              </div>\n              <div className=\"p-1 pt-8\">\n                <Button className=\"w-1/2\" submit={true} disabled={!formChanged}>\n                  {navigation.state === 'submitting' ? 'Saving' : 'Save Changes'}\n                </Button>\n              </div>\n              <Link to=\"/signOut\" className=\"text-l p-1 text-center text-primary hover:underline\">\n                Sign Out\n              </Link>\n            </div>\n          </Form>\n        </div>\n      </div>\n    </div>;\n}\n_s(Profile, \"wIU8EWm9m2WRPYbohKbpcububCw=\", false, function () {\n  return [useNavigation, useLoaderData, useActionData, useSubmit];\n});\n_c = Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAAA,gBAA4C;AAS5C,6BAAiC;AAEjC,oCAA4B;AAC5B,qBAA2B;AAC3B,yBAA4B;AA6JpB;AA/LR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,uCAAyC,EAAE;AAAA,EACpF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAkC;AAClC,cAAY,IAAI,eAAe;AACjC;AAqIe,SAAR,UAA2B;AAvJlC,cAAAC,KAAA;AAwJE,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,gBAAY,sBAAO,IAAI;AAC7B,QAAM,aAAa,cAAc;AACjC,QAAM,aAAa,cAAc;AACjC,QAAM,CAAC,qBAAqB,sBAAsB,QAAI,wBAAS,KAAK;AACpE,QAAM,CAAC,WAAW,YAAY,QAAI,yBAAS,8CAAY,cAAZ,YAAyB,EAAE;AACtE,QAAM,CAAC,UAAU,WAAW,QAAI,yBAAS,8CAAY,aAAZ,YAAwB,EAAE;AACnE,QAAM,CAAC,QAAQ,QAAI,yBAASA,MAAA,yCAAY,cAAZ,OAAAA,MAAyB,EAAE;AACvD,QAAM,CAAC,OAAO,QAAQ,QAAI,yBAAS,8CAAY,UAAZ,YAAqB,EAAE;AAC1D,QAAM,CAAC,UAAU,WAAW,QAAI,wBAAS,EAAE;AAC3C,QAAM,CAAC,cAAc,eAAe,QAAI,wBAAS,KAAK;AACtD,QAAM,CAAC,OAAO,QAAQ,QAAI,yBAAS,8CAAY,UAAZ,YAAqB,EAAE;AAC1D,QAAM,CAAC,YAAY,aAAa,QAAI,wBAAS,KAAK;AAClD,QAAM,CAAC,iBAAiB,QAAI,yBAAS,8CAAY,kBAAZ,YAA6B,EAAE;AACpE,QAAM,CAAC,gBAAgB,iBAAiB,QAAI,yBAAS,8CAAY,cAAZ,YAAyB,EAAE;AAChF,QAAM,CAAC,aAAa,cAAc,QAAI,wBAAS,KAAK;AACpD,QAAM,CAAC,gBAAgB,iBAAiB,QAAI,wBAAS,EAAE;AACvD,QAAM,SAAS,UAAU;AACzB,QAAM,mBAAe,sBAAO,IAAI;AAChC,+BAAU,MAAM;AACd,QAAI,yCAAY,cAAc;AAC5B,wBAAkB,yBAAyB;AAC3C,6BAAuB,CAAC,EAAC,yCAAY,aAAqB;AAC1D,iBAAW,MAAM,uBAAuB,KAAK,GAAG,GAAI;AAAA,IACtD,WAAW,yCAAY,SAAS;AAC9B,wBAAkB,eAAe;AACjC,6BAAuB,CAAC,EAAC,yCAAY,QAAgB;AACrD,iBAAW,MAAM,uBAAuB,KAAK,GAAG,GAAI;AAAA,IACtD;AAAA,EACF,GAAG,CAAC,UAAU,CAAC;AACf,QAAM,kBAAkB,YAAY;AAvLtC,QAAAC;AAwLI,UAAMC,QAAMD,MAAA,uCAAW,YAAX,gBAAAA,IAAoB,YAAY,UAAU;AACtD,sBAAkBC,QAAA,OAAAA,OAAO,EAAE;AAC3B,kBAAc,KAAK;AACnB,mBAAe,IAAI;AAAA,EACrB;AACA,QAAM,aAAY,oDAAY,cAAZ,mBAAuB,OAAO,OAA9B,YAAoC,QAAO,oDAAY,aAAZ,mBAAsB,OAAO,OAA7B,YAAmC;AAChG,SAAO,mDAAC,SAAI,WAAW,0DACnB,6DAAC,SAAI,WAAW,sDACd;AAAA,uDAAC,QAAG,WAAW,GAAG,iBAAiB,0BAAnC;AAAA;AAAA;AAAA;AAAA,WAA6C;AAAA,IAC5C,uBAAuB,mDAAC,iBAAM,SAAQ,WAAU,OAAO,gBAAgB,SAAS,MAAM;AACvF,6BAAuB,KAAK;AAAA,IAC9B,KAF0B;AAAA;AAAA;AAAA;AAAA,WAEvB;AAAA,IACD,mDAAC,SAAI,WAAU,0CACb,6DAAC,QAAK,QAAO,QAAO,SAAQ,uBAAsB,UAAU,MAAM,eAAe,IAAI,GAAG,UAAU,MAAM,uBAAuB,KAAK,GAClI;AAAA,yDAAC,SACC;AAAA,2DAAC,SAAI,WAAU,yBACb;AAAA,6DAAC,WAAM,SAAQ,QAAO,WAAU,oBAC9B,6DAAC,SAAI,WAAU,iDACb,6DAAC,UAAO,cAAc,UAAU,UAAU,OAAO,cAAa,UAAS,WAAU,8GAAjF;AAAA;AAAA;AAAA;AAAA,iBAA4L,KAD9L;AAAA;AAAA;AAAA;AAAA,iBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,iBAIA;AAAA,UACA,mDAAC,SAAI,WAAU,4CACb;AAAA,+DAAC,kBAAO,WAAU,yBAAwB,SAAQ,WAAU,SAAS,MAAM;AAC3E,uBAAS,EAAE;AACX,oBAAM,WAAW,IAAI,SAAS;AAC9B,uBAAS,IAAI,WAAW,aAAa;AACrC,qBAAO,UAAU;AAAA,gBACf,QAAQ;AAAA,cACV,CAAC;AAAA,YACH,GAAG,4BAPD;AAAA;AAAA;AAAA;AAAA,mBASA;AAAA,YACA,mDAAC,kBAAO,SAAQ,WAAU,kBAAkB,MAAM,WAAU,cAAa,SAAS,MAAM;AAGxF,kBAAI,aAAa,SAAS;AACxB;AACA,6BAAa,QAAQ,MAAM;AAAA,cAC7B;AAAA,YACF,GAAG,4BAPD;AAAA;AAAA;AAAA;AAAA,mBASA;AAAA,eApBF;AAAA;AAAA;AAAA;AAAA,iBAqBA;AAAA,UACA,mDAAC,SAAI,WAAU,iBACb,6DAAC,WAAM,KAAK,cAAc,IAAG,QAAO,MAAK,QAAO,QAAO,cAAa,MAAK,aAAY,UAAU,OAAM,MAAK;AAC1G,gBAAI,EAAE,OAAO,SAAS,EAAE,OAAO,MAAM,CAAC,GAAG;AACvC,uBAAS,IAAI,gBAAgB,EAAE,OAAO,MAAM,CAAC,CAAC,CAAC;AAAA,YACjD;AAAA,UACF,GAAG,WAAU,yBAJX;AAAA;AAAA;AAAA;AAAA,iBAIiC,KALnC;AAAA;AAAA;AAAA;AAAA,iBAMA;AAAA,aAlCF;AAAA;AAAA;AAAA;AAAA,eAmCA;AAAA,QACA,mDAAC,aAAU,UAAU,WAAS;AAC9B,cAAI,WAAU,yCAAY,QAAO;AAC/B,qBAAS,KAAK;AACd,4BAAgB,IAAI;AAAA,UACtB,OAAO;AACL,qBAAS,KAAK;AACd,wBAAY,EAAE;AACd,4BAAgB,KAAK;AAAA,UACvB;AAAA,QACF,GAAG,MAAM,SAAS,OAAO,OAAO,aAAY,SAAQ,OAAM,SAAQ,OAAO,CAAC,EAAC,yCAAY,QAAO,UAAU,yCAAY,SATlH;AAAA;AAAA;AAAA;AAAA,eASyH;AAAA,QACxH,gBAAgB,mDAAC,aAAU,UAAU,WAAS;AAC/C,sBAAY,KAAK;AAAA,QACnB,GAAG,UAAU,MAAM,MAAM,YAAY,OAAO,UAAU,aAAY,YAAW,OAAM,oBAAmB,OAAO,CAAC,EAAC,yCAAY,WAAU,UAAU,yCAAY,YAFxI;AAAA;AAAA;AAAA;AAAA,eAEkJ;AAAA,QACnK,mDAAC,aAAU,MAAM,aAAa,UAAU,WAAS;AACjD,uBAAa,KAAK;AAAA,QACpB,GAAG,OAAO,WAAW,aAAY,cAAa,OAAM,cAAa,OAAO,CAAC,EAAC,yCAAY,YAAW,WAAU,8CAAY,cAAZ,YAAyB,MAFlI;AAAA;AAAA;AAAA;AAAA,eAEsI;AAAA,QACtI,mDAAC,aAAU,MAAM,YAAY,UAAU,WAAS;AAChD,sBAAY,KAAK;AAAA,QACnB,GAAG,OAAO,UAAU,aAAY,aAAY,OAAM,aAAY,OAAO,CAAC,EAAC,yCAAY,WAAU,WAAU,8CAAY,aAAZ,YAAwB,MAF7H;AAAA;AAAA;AAAA;AAAA,eAEiI;AAAA,QACjI,mDAAC,WAAM,MAAK,UAAS,MAAK,YAAW,OAAO,YAA5C;AAAA;AAAA;AAAA;AAAA,eAAsD;AAAA,QACtD,mDAAC,WAAM,MAAK,UAAS,MAAK,qBAAoB,OAAO,qBAArD;AAAA;AAAA;AAAA;AAAA,eAAwE;AAAA,QACxE,mDAAC,WAAM,IAAG,iBAAgB,MAAK,UAAS,MAAK,iBAAgB,OAAO,kBAApE;AAAA;AAAA;AAAA;AAAA,eAAoF;AAAA,QACpF,mDAAC,SAAI,WAAU,4BACb;AAAA,6DAAC,WAAM,SAAS,aAAa,WAAW,4CAA4C,yBAApF;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,mDAAC,SAAI,WAAU,sBAAqB,QAAQ,cAAc,CAAC,gBACzD,6DAAC,SAAI,KAAK,gBAAgB,KAAI,aAAY,WAAU,cAApD;AAAA;AAAA;AAAA;AAAA,iBAA+D,KADjE;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aANF;AAAA;AAAA;AAAA;AAAA,eAOA;AAAA,QACC,cAAc,sFACX;AAAA,6DAAC,SAAI,WAAU,eACb,6DAAC,8BAAAC,SAAA,EAAgB,UAAS,SAAQ,aAAa;AAAA,YACjD,WAAW;AAAA,UACb,GAAG,KAAK,aAFJ;AAAA;AAAA;AAAA;AAAA,iBAEe,KAHjB;AAAA;AAAA;AAAA;AAAA,iBAIA;AAAA,UACA,mDAAC,SAAI,WAAU,sCACb;AAAA,+DAAC,kBAAO,SAAQ,WAAU,MAAK,MAAK,SAAS,MAAM,cAAc,KAAK,GAAG,sBAAzE;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YACA,mDAAC,kBAAO,SAAQ,WAAU,MAAK,MAAK,SAAS,MAAG;AAnRpE,kBAAAF;AAmRuE,sBAAAA,MAAA,uCAAW,YAAX,gBAAAA,IAAoB;AAAA,eAAS,qBAAhF;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YACA,mDAAC,kBAAO,SAAQ,WAAU,MAAK,MAAK,SAAS,iBAAiB,sBAA9D;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,eATF;AAAA;AAAA;AAAA;AAAA,iBAUA;AAAA,aAhBW;AAAA;AAAA;AAAA;AAAA,eAiBb;AAAA,WApFJ;AAAA;AAAA;AAAA;AAAA,aAqFA;AAAA,MACA,mDAAC,SAAI,WAAU,mBACb;AAAA,2DAAC,SAAI,WAAU,OACb,6DAAC,kBAAO,WAAU,UAAS,SAAQ,WAAU,SAAS,MAAM,cAAc,IAAI,GAAG,gCAAjF;AAAA;AAAA;AAAA;AAAA,eAEA,KAHF;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,QACA,mDAAC,SAAI,WAAU,YACb,6DAAC,QAAK,IAAG,mBACP,6DAAC,kBAAO,WAAU,UAAS,SAAQ,WAAU,SAAS,MAAM;AAAA,QAAC,GAAG,+BAAhE;AAAA;AAAA;AAAA;AAAA,eAEA,KAHF;AAAA;AAAA;AAAA;AAAA,eAIA,KALF;AAAA;AAAA;AAAA;AAAA,eAMA;AAAA,QACA,mDAAC,SAAI,WAAU,YACb,6DAAC,kBAAO,WAAU,SAAQ,QAAQ,MAAM,UAAU,CAAC,aAChD,qBAAW,UAAU,eAAe,WAAW,kBADlD;AAAA;AAAA;AAAA;AAAA,eAEA,KAHF;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,QACA,mDAAC,QAAK,IAAG,YAAW,WAAU,uDAAsD,wBAApF;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WApBF;AAAA;AAAA;AAAA;AAAA,aAqBA;AAAA,SA5GF;AAAA;AAAA;AAAA;AAAA,WA6GA,KA9GF;AAAA;AAAA;AAAA;AAAA,WA+GA;AAAA,OApHF;AAAA;AAAA;AAAA;AAAA,SAqHA,KAtHG;AAAA;AAAA;AAAA;AAAA,SAuHL;AACJ;AACA,GAAG,SAAS,gCAAgC,OAAO,WAAY;AAC7D,SAAO,CAAC,eAAe,eAAe,eAAe,SAAS;AAChE,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,SAAS;AAE1B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react", "_c", "_a", "URL", "SignatureCanvas"]
}
