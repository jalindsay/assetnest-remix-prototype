{
  "version": 3,
  "sources": ["../../../app/routes/_signedIn.$orgId.$inspectionInstanceId.doingInspectionInstance.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_signedIn.$orgId.$inspectionInstanceId.doingInspectionInstance.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_signedIn.$orgId.$inspectionInstanceId.doingInspectionInstance.tsx\");\n  import.meta.hot.lastModified = \"1706454925351.7822\";\n}\n// REMIX HMR END\n\nimport { redirect } from '@remix-run/node';\nimport { useActionData, useLoaderData, useNavigate, useSubmit } from '@remix-run/react';\nimport { useEffect, useRef, useState } from 'react';\nimport { secondaryText, subPageTitle } from '~/styles/typography';\nimport Button from '~/components/ui/Button';\nimport { Icon } from '~/components/ui/Icon';\nimport { getInspectionInstance, updateInspectionInstance } from '~/endpoints/inspectionInstance';\nimport { getSession } from '~/cookies';\nimport { getMembershipWithUserAndOrganisation } from '~/endpoints/membership';\nimport { Card } from '~/components/ui/Card';\nimport { Tabs } from '~/components/ui/Tabs';\nimport { downloadFile } from '~/utils/downloadFile';\nimport { getStorageClient } from '~/utils/storageClient';\nimport { v4 as uuid } from 'uuid';\nimport { TextArea } from '~/components/ui/TextArea';\nimport SignatureCanvas from 'react-signature-canvas';\nimport { getUserId, updateUser } from '~/endpoints/user';\nimport { getStorage } from '~/utils/storage.server';\nexport async function action({\n  request,\n  params\n}) {\n  const body = await request.formData();\n  const formType = body.get('_action');\n  const session = await getSession(request.headers.get('Cookie'));\n  const userId = session.get('userId');\n  switch (formType) {\n    case 'newSignature':\n      {\n        const storageClient = getStorage();\n        let signatureData = body.get('signatureData');\n        signatureData = Buffer.from(signatureData.split(',')[1], 'base64');\n        const options = {\n          type: 'image/png'\n        };\n        signatureData = new Blob([signatureData], options);\n        const signatureUuid = uuid();\n        await storageClient.from('assetnest').upload('signature/' + signatureUuid, signatureData);\n        await updateUser({\n          userId: userId ?? -1,\n          signature: signatureUuid\n        });\n        const newSignatureUrl = storageClient.from('assetnest').getPublicUrl('signature/' + signatureUuid ?? '');\n        return {\n          newSignatureUrl: newSignatureUrl.data.publicUrl\n        };\n      }\n    case 'completeInspection':\n      {\n        const passFailString = body.get('passFail');\n        const passFail = passFailString === 'true';\n        const comment = body.get('comment');\n        const imagesStoragePathData = body.getAll('images[]');\n        await updateInspectionInstance({\n          id: parseInt(params.inspectionInstanceId ?? ''),\n          updatedByUserID: userId ?? -1,\n          completedByUserID: userId ?? -1,\n          Status: 'COMPLETED',\n          inspectionInstanceAnswers: [{\n            booleanValue: passFail,\n            inspectionFormQuestionId: 10\n          }, {\n            stringValue: comment,\n            inspectionFormQuestionId: 11\n          }, {\n            stringArrayValue: imagesStoragePathData,\n            inspectionFormQuestionId: 12\n          }]\n        });\n        return null;\n      }\n  }\n}\nexport const loader = async ({\n  request,\n  params\n}) => {\n  const inspectionInstance = await getInspectionInstance({\n    inspectionInstanceId: parseInt(params.inspectionInstanceId ?? '')\n  });\n  const session = await getSession(request.headers.get('Cookie'));\n  const userId = session.get('userId');\n  const storageClient = getStorage();\n  const currentMembership = await getMembershipWithUserAndOrganisation({\n    userId: userId ?? -1,\n    orgId: parseInt(params.orgId ?? '')\n  });\n  if (!currentMembership?.role.inspectionCarryOut) {\n    return redirect('/' + (params.orgId ?? '') + '/inspections/list');\n  }\n  const currentUser = await getUserId(userId ?? -1);\n  const signatureUrlData = currentUser?.signature ? storageClient.from('assetnest').getPublicUrl('signature/' + currentUser.signature ?? '') ?? '' : undefined;\n  const signatureImg = signatureUrlData?.data?.publicUrl;\n  if (inspectionInstance?.Status !== 'STARTED' || inspectionInstance?.organisationId !== parseInt(params.orgId ?? '')) {\n    return redirect('/' + (params.orgId ?? '') + '/inspections/list');\n  }\n  return {\n    STORAGE_URL: process.env.STORAGE_URL ?? '',\n    SUPABASE_SERVICE_ROLE_KEY: process.env.SUPABASE_SERVICE_ROLE_KEY ?? '',\n    mapApiKey: process.env.MAP_API_KEY ?? '',\n    inspectionInstance: inspectionInstance,\n    inspectionManage: currentMembership?.role.inspectionManage,\n    signatureImg\n  };\n};\nexport default function UnStartedInspectionInstance() {\n  _s();\n  const loaderData = useLoaderData();\n  const actionData = useActionData();\n  const submit = useSubmit();\n  useEffect(() => {\n    setSignatureUrl(actionData?.newSignatureUrl ?? undefined);\n  }, [actionData?.newSignatureUrl]);\n  const [displayTab, setDisplayTab] = useState('Inspection');\n  const [filesOnInstance, setFilesOnInstance] = useState();\n  const navigation = useNavigate();\n  const storageClient = getStorageClient(loaderData.STORAGE_URL, loaderData.SUPABASE_SERVICE_ROLE_KEY);\n  const [imagesToDisplay, setImagesToDisplay] = useState([]);\n  const [passFail, setPassFail] = useState();\n  const [comment, setComment] = useState('');\n  const [imagesStoragePathData, setImagesStorageString] = useState([]);\n  const [openCanvas, setOpenCanvas] = useState(false);\n  const sigCanvas = useRef(null);\n  const [signatureUrl, setSignatureUrl] = useState(loaderData.signatureImg);\n  useEffect(() => {\n    setFilesOnInstance(loaderData.inspectionInstance?.SupportingFiles.map(file => {\n      const name = file.inspectionFileUrl.split('/')[file.inspectionFileUrl.split('/').length - 1];\n      const savedPath = file.inspectionFileUrl;\n      const fileSize = file.inspectionFileSize;\n      return {\n        name,\n        savedPath,\n        size: fileSize,\n        uploading: false\n      };\n    }) ?? []);\n  }, [loaderData]);\n  return <div className=\"self-start py-4 md:py-8\">\n      <div className=\" text-gray-500 \">\n        <span className=\"hover:cursor-pointer hover:underline\" onClick={() => {\n        navigation('../inspections/list');\n      }}>\n          Close\n        </span>\n      </div>\n\n      <div className=\"flex w-full flex-col \">\n        <Card innerClassName=\"p-4 md:p-8  w-full\">\n          <div className={`${subPageTitle}`}>\n            {loaderData.inspectionInstance?.inspectionReference}\n          </div>\n          <div className=\"py-2\">\n            Asset:{' '}\n            <span className=\" text-sky-400 hover:cursor-pointer hover:underline\" onClick={() => {\n            navigation('../' + loaderData.inspectionInstance?.asset?.id + '/viewAsset');\n          }}>\n              {loaderData.inspectionInstance?.asset?.properties.find(property => property.categoryProperty.label === 'Asset Name')?.stringValue ?? ''}\n            </span>\n          </div>\n        </Card>\n        <Tabs defaultValue={'assetList'} className=\"w-full\" onValueChange={value => setDisplayTab(value)} value={displayTab} tabs={[{\n        value: 'Inspection',\n        valueLabel: 'Inspection'\n      }, {\n        value: 'Defects',\n        valueLabel: 'Defects'\n      }, {\n        value: 'Procedures',\n        valueLabel: 'Procedures'\n      }]} />\n\n        {displayTab === 'Inspection' && <div>\n            {loaderData.inspectionInstance?.inspectionForm.inspectionFormQuestion.find(question => question.questionType === 'PassFail') && <Card innerClassName=\"p-4 w-full\">\n                <div className=\"flex w-full flex-col md:w-80\">\n                  <div className=\"w-full pb-2  md:w-80\">\n                    <Button className=\"w-full\" variant={passFail ? 'outlineGreen' : 'outline'} onClick={() => {\n                setPassFail(true);\n              }}>\n                      Pass\n                    </Button>\n                  </div>\n                  <div className=\"w-full md:w-80\">\n                    <Button className=\"w-full\" variant={passFail === false ? 'outlineRed' : 'outline'} onClick={() => {\n                setPassFail(false);\n              }}>\n                      Fail\n                    </Button>\n                  </div>\n                </div>\n              </Card>}\n            <Card innerClassName=\"p-4 w-full\">\n              <div className=\"w-full\">\n                <div className={subPageTitle}>Media</div>\n                <div className={secondaryText}>\n                  Add images of your inspection here. Defects should be reported\n                  under the defect tab.\n                </div>\n                <div className=\"z-0 w-full justify-center rounded border-2 hover:cursor-pointer  md:w-80 \">\n                  <label htmlFor=\"file\" className=\"flex w-full\">\n                    <div className=\" flex w-full flex-row items-center justify-center p-1 hover:cursor-pointer\">\n                      <Icon icon=\"addMediaImage\" className=\"p-1\" />\n                      <div>Add Photos</div>\n                    </div>\n                  </label>\n                  <div className=\"invisible absolute rounded bg-slate-300 hover:cursor-pointer\">\n                    <input id=\"file\" type=\"file\" accept=\".png, .jpg\" name=\"imageData\" onChange={async e => {\n                  if (e.target.files) {\n                    const toSaveDisplay = [];\n                    const toSaveStoragePaths = [];\n                    await Promise.all(Array.from(e.target.files).map(async file => {\n                      const newUrl = URL.createObjectURL(file);\n                      toSaveDisplay.push(newUrl);\n                      const imageID = uuid();\n                      const pathToImage = 'inspectionInstance/' + imageID;\n                      await storageClient.from('assetnest').upload(pathToImage, file);\n                      toSaveStoragePaths.push(pathToImage);\n                    }));\n                    setImagesStorageString([...imagesStoragePathData, ...toSaveStoragePaths]);\n                    setImagesToDisplay([...imagesToDisplay, ...toSaveDisplay]);\n                  }\n                }} multiple className=\" invisible hover:cursor-pointer\" />\n                  </div>\n                </div>\n                <div className=\"max-sm:flex max-sm:flex-wrap max-sm:justify-center\">\n                  {imagesToDisplay.map((imageToDisplay, index) => {\n                return <div key={index} className=\"inline-flex flex-wrap  p-2\">\n                        <div className=\"z-0  h-20  w-20 cursor-pointer justify-center rounded border sm:h-40 sm:w-40\" onClick={() => {\n                    const indexToRemove = index;\n                    const newImagesStoragePathData = [...imagesStoragePathData];\n                    const newImagesToDisplay = [...imagesToDisplay];\n                    const pathToImage = newImagesStoragePathData[indexToRemove];\n                    newImagesStoragePathData.splice(indexToRemove, 1);\n                    newImagesToDisplay.splice(indexToRemove, 1);\n                    storageClient.from('assetnest').remove([pathToImage]);\n                    setImagesStorageString([...newImagesStoragePathData]);\n                    setImagesToDisplay([...newImagesToDisplay]);\n                  }}>\n                          <input type=\"hidden\" name={'images[]'} className=\" hidden \" value={imagesStoragePathData[index]} />\n                          <img className=\"h-full w-full\" src={imageToDisplay} alt={''} />\n                        </div>\n                      </div>;\n              })}\n                </div>\n              </div>\n              <div className=\"w-full  md:w-80\">\n                <div className={subPageTitle}>Comments</div>\n                <TextArea noPadding onChange={newValue => {\n              setComment(newValue);\n            }} value={comment} />\n              </div>\n              <div>\n                <div className={subPageTitle}>Signature</div>\n                <div className={secondaryText}>\n                  To verify your identity, add your signature below. This will\n                  be saved to your profile and allow for more efficient\n                  inspections.\n                </div>\n                {signatureUrl ? <div className=\"h-52 w-full  border md:w-80 \">\n                    <img src={signatureUrl} alt=\"signature\" className=\"max-h-52\" />\n                  </div> : openCanvas ? <div className=\"w-full  md:w-80\">\n                    <div className=\" h-52 \">\n                      <SignatureCanvas penColor=\"black\" canvasProps={{\n                  className: 'bg-white border border-gray-300 rounded-md h-full w-full'\n                }} ref={sigCanvas} />\n                    </div>\n                    <div className=\"flex justify-center space-x-4 py-8\">\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => setOpenCanvas(false)}>\n                        Cancel\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => sigCanvas?.current?.clear()}>\n                        Clear\n                      </Button>\n                      <Button variant=\"default\" size=\"sm\" onClick={() => {\n                  const URL = sigCanvas?.current?.getCanvas().toDataURL('image/png');\n                  const formData = new FormData();\n                  formData.set('_action', 'newSignature');\n                  formData.set('signatureData', URL ?? '');\n                  submit(formData, {\n                    method: 'post'\n                  });\n                }}>\n                        Create\n                      </Button>\n                    </div>\n                  </div> : <div className=\"flex  h-52 w-full items-center justify-center border md:w-80 \">\n                    <Button variant=\"outline\" onClick={() => setOpenCanvas(true)}>\n                      Create Signature\n                    </Button>\n                  </div>}\n              </div>\n            </Card>\n          </div>}\n        {displayTab === 'Defects' && <>Defects Coming Soon</>}\n        {displayTab === 'Procedures' && <Card innerClassName=\"p-8 w-full\">\n            {filesOnInstance && filesOnInstance.length > 0 ? filesOnInstance?.map((file, index) => <div key={index} className=\"flex w-full items-center  p-1  md:w-80\" id={'file' + index}>\n                  <div className=\"pr-2\">\n                    <Icon icon=\"Folder\" />\n                  </div>\n                  <div className=\"flex flex-col\">\n                    <div>{file.name}</div>\n                    <div className={`${secondaryText}`}>{file.size}</div>\n                  </div>\n                  <div className=\"ml-auto flex flex-row items-end\">\n                    <div className=\"pl-2\">\n                      <Icon className=\" hover:cursor-pointer\" icon=\"download\" onClick={async () => {\n                await downloadFile(storageClient, file.savedPath, file.name);\n              }} />\n                    </div>\n                  </div>\n                </div>) : <div className=\"flex w-full items-center  p-1  md:w-80\">\n                <div>No files attached to this inspection</div>\n              </div>}\n          </Card>}\n      </div>\n      <div className=\"flex justify-center p-2\">\n        <Button disabled={passFail === undefined} className=\" w-full md:w-80\" onClick={() => {\n        const formData = new FormData();\n        formData.set('_action', 'completeInspection');\n        formData.set('passFail', passFail?.toString() ?? '');\n        formData.set('comment', comment);\n        imagesStoragePathData.forEach(imageStoragePath => {\n          formData.set('images[]', imageStoragePath);\n        });\n        submit(formData, {\n          method: 'post'\n        });\n      }}>\n          Complete Inspection\n        </Button>\n      </div>\n    </div>;\n}\n_s(UnStartedInspectionInstance, \"I8McOvb02z93BQ9kmtlFbMXhDLU=\", false, function () {\n  return [useLoaderData, useActionData, useSubmit, useNavigate];\n});\n_c = UnStartedInspectionInstance;\nvar _c;\n$RefreshReg$(_c, \"UnStartedInspectionInstance\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "_c", "_a", "_b", "SignatureCanvas", "URL"]
}
