{
  "version": 3,
  "sources": ["../../../app/routes/_auth.signUpInvite.$inviteToken.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth.signUpInvite.$inviteToken.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth.signUpInvite.$inviteToken.tsx\");\n  import.meta.hot.lastModified = \"1706454925350.383\";\n}\n// REMIX HMR END\n\nimport { redirect } from '@remix-run/node';\nimport { Form, useActionData, useLoaderData } from '@remix-run/react';\nimport { useState } from 'react';\nimport { Card } from '~/components/ui/Card';\nimport { TextInput } from '~/components/ui/TextInput';\nimport { getMembershipByInviteToken, verifyUserViaMembershipInviteToken } from '~/endpoints/membership';\nimport AssetNestLogo from '~/assets/Logos/AssetNestLogoDark.svg';\nimport { passwordValid } from '~/utils/passwordValidator';\nimport { generatePasswordHash } from '~/utils/passwordHashing.server';\nimport { commitSession, getSession } from '~/cookies';\nimport Button from '~/components/ui/Button';\nexport const loader = async ({\n  params\n}) => {\n  const getMembershipResult = await getMembershipByInviteToken(params.inviteToken);\n  if (getMembershipResult.user.passwordHash !== null) {\n    console.log('user exists but is logged out, redirecting to login');\n    return redirect('/login', {\n      status: 302\n    });\n  }\n  return {\n    email: getMembershipResult?.user.email ?? '',\n    inviteToken: params.inviteToken\n  };\n};\nexport async function action({\n  request\n}) {\n  const body = await request.formData();\n  const email = body.get('email') ?? '';\n  const password = body.get('password') ?? '';\n  const repeatPassword = body.get('repeatPassword') ?? '';\n  const inviteToken = body.get('inviteToken') ?? '';\n  let emailError = '';\n  let passwordError = '';\n  let repeatPasswordError = '';\n  if (password.length === 0) {\n    passwordError = 'A password is required';\n  } else if (!passwordValid(password)) {\n    passwordError = 'Passwords must contain at least 12 characters';\n  }\n  if (repeatPassword.length === 0) {\n    repeatPasswordError = 'A repeat password is required';\n  } else if (repeatPassword !== password) {\n    repeatPasswordError = 'Passwords do not match';\n  }\n  if (emailError || passwordError || repeatPasswordError) {\n    return {\n      email: emailError,\n      password: passwordError,\n      repeatPassword: repeatPasswordError\n    };\n  }\n  const passwordHash = await generatePasswordHash(password);\n  const updateMembershipInviteResult = await verifyUserViaMembershipInviteToken({\n    inviteToken: inviteToken,\n    email: email,\n    passwordHash: passwordHash\n  });\n\n  // Store the userId in the cookie. This effectively logs the user in.\n  const session = await getSession(request.headers.get('Cookie'));\n  session.set('userId', updateMembershipInviteResult?.updatedUser.id ?? -1);\n  const cookie = await commitSession(session);\n  return redirect('/organisationList', {\n    status: 302,\n    headers: {\n      'Set-Cookie': cookie\n    }\n  });\n}\nexport default function SignUp() {\n  _s();\n  const loaderData = useLoaderData();\n  const email = loaderData.email;\n  const [password, setPassword] = useState('');\n  const [repeatPassword, setRepeatPassword] = useState('');\n  const inviteToken = loaderData.inviteToken;\n  const actionData = useActionData();\n  return <div>\n      <Card>\n        <div className=\"flex w-full flex-col\">\n          <img className=\"p-4\" src={AssetNestLogo} alt={'assetnest logo'} />\n          <h1 className={' text-l text-brand_Teal p-1 text-center font-bold'}>\n            Create your account\n          </h1>\n          <Form method=\"post\">\n            <TextInput name={'email'} value={email} onChange={() => {}} placeholder=\"Email\" label=\"Email\" disabled={true} />\n            <TextInput name={'password'} onChange={value => {\n            setPassword(value);\n          }} value={password} placeholder=\"Password\" label=\"Password\" password error={!!actionData?.password} helpText={actionData?.password} />\n            <TextInput name={'repeatPassword'} onChange={value => {\n            setRepeatPassword(value);\n          }} value={repeatPassword} placeholder=\"Repeat Password\" label=\"Repeat Password\" password error={!!actionData?.repeatPassword} helpText={actionData?.repeatPassword} />\n            <input hidden name={'inviteToken'} value={inviteToken} readOnly />\n            <Button className=\"w-full\" submit variant=\"default\">\n              Create User\n            </Button>\n          </Form>\n        </div>\n      </Card>\n    </div>;\n}\n_s(SignUp, \"yoZOCQ/3/bHi2cG2jnxqFulT8ao=\", false, function () {\n  return [useLoaderData, useActionData];\n});\n_c = SignUp;\nvar _c;\n$RefreshReg$(_c, \"SignUp\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAyB;AAEzB,IAAAA,gBAAyB;AAMzB,6BAAqC;AA2E3B;AAvGV,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,qDAAuD,EAAE;AAAA,EAClG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAgD;AAChD,cAAY,IAAI,eAAe;AACjC;AA2Ee,SAAR,SAA0B;AAC/B,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,QAAQ,WAAW;AACzB,QAAM,CAAC,UAAU,WAAW,QAAI,wBAAS,EAAE;AAC3C,QAAM,CAAC,gBAAgB,iBAAiB,QAAI,wBAAS,EAAE;AACvD,QAAM,cAAc,WAAW;AAC/B,QAAM,aAAa,cAAc;AACjC,SAAO,mDAAC,SACJ,6DAAC,QACC,6DAAC,SAAI,WAAU,wBACb;AAAA,uDAAC,SAAI,WAAU,OAAM,KAAK,2BAAe,KAAK,oBAA9C;AAAA;AAAA;AAAA;AAAA,WAAgE;AAAA,IAChE,mDAAC,QAAG,WAAW,qDAAqD,mCAApE;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,aAAU,MAAM,SAAS,OAAO,OAAO,UAAU,MAAM;AAAA,MAAC,GAAG,aAAY,SAAQ,OAAM,SAAQ,UAAU,QAAxG;AAAA;AAAA;AAAA;AAAA,aAA8G;AAAA,MAC9G,mDAAC,aAAU,MAAM,YAAY,UAAU,WAAS;AAChD,oBAAY,KAAK;AAAA,MACnB,GAAG,OAAO,UAAU,aAAY,YAAW,OAAM,YAAW,UAAQ,MAAC,OAAO,CAAC,EAAC,yCAAY,WAAU,UAAU,yCAAY,YAFxH;AAAA;AAAA;AAAA;AAAA,aAEkI;AAAA,MAClI,mDAAC,aAAU,MAAM,kBAAkB,UAAU,WAAS;AACtD,0BAAkB,KAAK;AAAA,MACzB,GAAG,OAAO,gBAAgB,aAAY,mBAAkB,OAAM,mBAAkB,UAAQ,MAAC,OAAO,CAAC,EAAC,yCAAY,iBAAgB,UAAU,yCAAY,kBAFlJ;AAAA;AAAA;AAAA;AAAA,aAEkK;AAAA,MAClK,mDAAC,WAAM,QAAM,MAAC,MAAM,eAAe,OAAO,aAAa,UAAQ,QAA/D;AAAA;AAAA;AAAA;AAAA,aAAgE;AAAA,MAChE,mDAAC,kBAAO,WAAU,UAAS,QAAM,MAAC,SAAQ,WAAU,2BAApD;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAXF;AAAA;AAAA;AAAA;AAAA,WAYA;AAAA,OAjBF;AAAA;AAAA;AAAA;AAAA,SAkBA,KAnBF;AAAA;AAAA;AAAA;AAAA,SAoBA,KArBG;AAAA;AAAA;AAAA;AAAA,SAsBL;AACJ;AACA,GAAG,QAAQ,gCAAgC,OAAO,WAAY;AAC5D,SAAO,CAAC,eAAe,aAAa;AACtC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,QAAQ;AAEzB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react"]
}
