{
  "version": 3,
  "sources": ["../../../app/routes/_auth.forgotPassword.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth.forgotPassword.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth.forgotPassword.tsx\");\n  import.meta.hot.lastModified = \"1706454925350.003\";\n}\n// REMIX HMR END\n\nimport { Card } from '~/components/ui/Card';\nimport AssetNestLogo from '~/assets/Logos/AssetNestLogoDark.svg';\nimport { TextInput } from '~/components/ui/TextInput';\nimport { useEffect, useState } from 'react';\nimport Button from '~/components/ui/Button';\nimport { Form, useActionData, useNavigate } from '@remix-run/react';\nimport { emailValid } from '~/utils/emailValidator';\nimport { generateUserNewResetPassword } from '~/endpoints/user';\nimport Alert from '~/components/ui/Alert';\nexport async function action({\n  request\n}) {\n  const body = await request.formData();\n  const email = body.get('email');\n  let emailError = '';\n  //double check email is valid\n  if (email.length === 0) {\n    emailError = 'An email address is required';\n  } else if (!emailValid(email ?? '')) {\n    emailError = 'Enter a valid email address';\n  }\n  if (emailError) {\n    return {\n      success: false,\n      email: emailError\n    };\n  }\n  try {\n    await generateUserNewResetPassword(email);\n    return {\n      success: true\n    };\n  } catch (error) {\n    return {\n      success: true\n    };\n  }\n}\nexport default function ForgotPassword() {\n  _s();\n  const navigation = useNavigate();\n  const [email, setEmail] = useState('');\n  const [displaySuccessAlert, setDisplaySuccessAlert] = useState(false);\n  const actionData = useActionData();\n  useEffect(() => {\n    if (actionData?.success) {\n      setDisplaySuccessAlert(!!actionData?.success ?? false);\n      setTimeout(() => setDisplaySuccessAlert(false), 5000);\n    }\n  }, [actionData]);\n  return <Card>\n      {displaySuccessAlert && <Alert variant=\"success\" title={'Email Sent'} onClose={() => {\n      setDisplaySuccessAlert(false);\n    }} />}\n      <div className=\"flex w-full flex-col\">\n        <img className=\"p-4\" src={AssetNestLogo} alt={'assetnest logo'} />\n        <h1 className={' text-l text-brand_Teal p-1 text-center font-bold'}>\n          Reset Your Password\n        </h1>\n        <div className=\"p flex justify-center text-center\">\n          <div className=\" w-72 sm:w-96 \">\n            Give us a email address associated with your assetnest account, and\n            we will send you an email with a link to reset your password.\n          </div>\n        </div>\n        <Form method=\"post\" onSubmit={() => setDisplaySuccessAlert(false)}>\n          <div>\n            <TextInput name={'email'} onChange={value => {\n            setEmail(value);\n          }} value={email} placeholder=\"Email\" label=\"Email\" error={!!actionData?.email} helpText={actionData?.email} />\n\n            <div className=\"w-full px-5 pt-4\">\n              <div className=\"p-1\">\n                <Button className=\"w-full\" submit variant=\"default\">\n                  Reset Password\n                </Button>\n              </div>\n            </div>\n            <div className=\"w-full px-5 pt-4\">\n              <div className=\"p-1\">\n                <Button className=\"w-full\" variant=\"default\" onClick={() => navigation('/logIn')}>\n                  Log In\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </Card>;\n}\n_s(ForgotPassword, \"lAwi82SBItQXvvM4yPtzkol6Ytw=\", false, function () {\n  return [useNavigate, useActionData];\n});\n_c = ForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgotPassword\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
