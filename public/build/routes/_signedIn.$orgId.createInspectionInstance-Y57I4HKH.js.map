{
  "version": 3,
  "sources": ["../../../app/routes/_signedIn.$orgId.createInspectionInstance.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_signedIn.$orgId.createInspectionInstance.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_signedIn.$orgId.createInspectionInstance.tsx\");\n  import.meta.hot.lastModified = \"1706454925358.053\";\n}\n// REMIX HMR END\n\nimport { redirect } from '@remix-run/node';\nimport { Form, useActionData, useLoaderData, useNavigate } from '@remix-run/react';\nimport { Card } from '~/components/ui/Card';\nimport { pageTitle, subPageTitle } from '~/styles/typography';\nimport { v4 as uuid } from 'uuid';\nimport { getPublicInspectionForms } from '~/endpoints/inspectionForm';\nimport { useState } from 'react';\nimport { getAssetsWithOrgId } from '~/endpoints/asset';\nimport Button from '~/components/ui/Button';\nimport { getSession } from '~/cookies';\nimport { createInspectionInstance, getInspectionInstanceWithInspectionIDAndOrgID } from '~/endpoints/inspectionInstance';\nimport { CreateInspectionInstanceDetails } from '~/components/page/createInspectionInstance/CreateInspectionInstanceDetails';\nimport { CreateInspectionInstanceMap } from '~/components/page/createInspectionInstance/CreateInspectionInstanceMap';\nimport { CreateInspectionInstanceProcedures } from '~/components/page/createInspectionInstance/CreateInspectionInstanceProcedures';\nexport async function action({\n  request,\n  params\n}) {\n  const body = await request.formData();\n  const inspectionReference = body.get('Inspection Reference');\n  const assetID = body.get('AssetId');\n  const inspectionID = body.get('Inspection Id');\n  const longitude = body.get('Longitude');\n  const latitude = body.get('Latitude');\n  const platformID = body.get('Platform ID');\n  const inspectionFormId = body.get('Category');\n  const filePathsToSave = body.getAll('FilePathsToSave[]');\n  const fileSizesToSave = body.getAll('FileSizesToSave[]');\n  const session = await getSession(request.headers.get('Cookie'));\n  const userId = session.get('userId');\n  let inspectionReferenceError = '';\n  let assetError = '';\n  let inspectionIDError = '';\n  const inspectionWithSameInspectionID = await getInspectionInstanceWithInspectionIDAndOrgID({\n    inspectionId: inspectionID,\n    orgId: parseInt(params.orgId ?? '')\n  });\n  if (inspectionReference === '') {\n    inspectionReferenceError = 'Inspection Reference is required';\n  }\n  if (assetID === '') {\n    assetError = 'Asset is required';\n  }\n  if (inspectionID === '') {\n    inspectionIDError = 'Inspection Id';\n  } else if (inspectionWithSameInspectionID.length !== 0) {\n    inspectionIDError = 'Inspection Id must be unique';\n  }\n  if (inspectionIDError !== '' || assetError !== '' || inspectionReferenceError !== '') {\n    return {\n      inspectionIDError,\n      assetError,\n      inspectionReferenceError\n    };\n  }\n\n  //create inspection\n  await createInspectionInstance({\n    inspectionReference,\n    assetID: parseInt(assetID),\n    inspectionID,\n    longitude: parseFloat(longitude),\n    latitude: parseFloat(latitude),\n    organisationId: parseInt(params.orgId ?? ''),\n    inspectionFormId: parseInt(inspectionFormId),\n    platformID: platformID,\n    createdByUserID: userId ?? -1,\n    supportingFiles: filePathsToSave.map((filePath, index) => {\n      return {\n        filePath,\n        fileSize: fileSizesToSave[index]\n      };\n    }).filter((value, index, array) => array.findIndex(target => target.filePath === value.filePath) === index) //for some reason am getting duplicates so filtering those values out\n  });\n  return redirect('/' + (params.orgId ?? '') + '/inspections/list');\n}\nexport const loader = async ({\n  params\n}) => {\n  const publicInspectionForms = await getPublicInspectionForms();\n  const orgsAssets = await getAssetsWithOrgId({\n    orgId: parseInt(params.orgId ?? '-1')\n  });\n  return {\n    mapsApiKey: process.env.MAP_API_KEY,\n    STORAGE_URL: process.env.STORAGE_URL,\n    SUPABASE_SERVICE_ROLE_KEY: process.env.SUPABASE_SERVICE_ROLE_KEY,\n    publicInspectionForms,\n    orgsAssets\n  };\n};\nexport default function CreateInspectionInstancePage() {\n  _s();\n  const loaderData = useLoaderData();\n  const actionData = useActionData();\n  const navigate = useNavigate();\n  const [currentCategoryId, setCurrentCategoryId] = useState(loaderData.publicInspectionForms[0].id.toString());\n  const [platformID] = useState(uuid());\n  const [inspectionReference, setInspectionReference] = useState('');\n  const [inspectionId, setInspectionId] = useState('');\n  const [selectAsset, setSelectAsset] = useState();\n  const [inspectionLng, setInspectionLng] = useState();\n  const [inspectionLat, setInspectionLat] = useState();\n  const [filesOnInstance, setFilesOnInstance] = useState();\n  return <div className=\"self-start py-4 md:py-8\">\n      <Form method=\"post\">\n        <div className=\" text-gray-500\">\n          Inspections /{' '}\n          <span className=\" font-semibold underline\">New Inspection</span>\n        </div>\n        <h1 className={`${pageTitle} p-1`}>New Inspection</h1>\n        <div className=\"flex flex-col md:hidden\">\n          <Card outerClassName={'overflow-auto py-1'}>\n            <CreateInspectionInstanceDetails inspectionReferenceError={actionData?.inspectionReferenceError} inspectionReference={inspectionReference} setInspectionReference={setInspectionReference} publicInspectionForms={loaderData.publicInspectionForms} setCurrentCategoryId={setCurrentCategoryId} currentCategoryId={currentCategoryId} assetError={actionData?.assetError} orgsAssets={loaderData.orgsAssets} selectAsset={selectAsset ?? undefined} inspectionIDError={actionData?.inspectionIDError} inspectionId={inspectionId} setInspectionId={setInspectionId} platformID={platformID} haveSelectedAAsset={newId => {\n            const selectedAsset = loaderData.orgsAssets.find(asset => asset.id.toString() === newId);\n            setSelectAsset(selectedAsset);\n            if (selectedAsset) {\n              setInspectionLat(selectedAsset?.properties.find(property => property.categoryProperty.label === 'Latitude')?.floatValue ?? undefined);\n              setInspectionLng(selectedAsset?.properties.find(property => property.categoryProperty.label === 'Longitude')?.floatValue ?? undefined);\n            }\n          }} />\n            <div className={`${subPageTitle} py-4`}>Location</div>\n            <CreateInspectionInstanceMap setInspectionLat={setInspectionLat} setInspectionLng={setInspectionLng} selectAsset={selectAsset ?? undefined} inspectionLng={inspectionLng} inspectionLat={inspectionLat} mapsApiKey={loaderData.mapsApiKey ?? ''} />\n            <div className={`${subPageTitle} py-4`}> Procedures</div>\n            <CreateInspectionInstanceProcedures setFilesOnInstance={setFilesOnInstance} filesOnInstance={filesOnInstance ?? []} STORAGE_URL={loaderData.STORAGE_URL ?? ''} SUPABASE_SERVICE_ROLE_KEY={loaderData.SUPABASE_SERVICE_ROLE_KEY ?? ''} />\n          </Card>\n        </div>\n        <div className=\"hidden  flex-col md:flex\">\n          <div className=\"flex\">\n            <div className=\"w-3/5 p-2\">\n              <div className={`${subPageTitle}`}>Details</div>\n              <Card innerClassName=\"p-8 w-full\">\n                <CreateInspectionInstanceDetails inspectionReferenceError={actionData?.inspectionReferenceError} inspectionReference={inspectionReference} setInspectionReference={setInspectionReference} publicInspectionForms={loaderData.publicInspectionForms} setCurrentCategoryId={setCurrentCategoryId} currentCategoryId={currentCategoryId} assetError={actionData?.assetError} orgsAssets={loaderData.orgsAssets} selectAsset={selectAsset ?? undefined} inspectionIDError={actionData?.inspectionIDError} inspectionId={inspectionId} setInspectionId={setInspectionId} platformID={platformID} haveSelectedAAsset={newId => {\n                const selectedAsset = loaderData.orgsAssets.find(asset => asset.id.toString() === newId);\n                setSelectAsset(selectedAsset);\n                if (selectedAsset) {\n                  setInspectionLat(selectedAsset?.properties.find(property => property.categoryProperty.label === 'Latitude')?.floatValue ?? undefined);\n                  setInspectionLng(selectedAsset?.properties.find(property => property.categoryProperty.label === 'Longitude')?.floatValue ?? undefined);\n                }\n              }} />\n              </Card>\n            </div>\n            <div className=\" w-2/5 p-2\">\n              <div className={`${subPageTitle}`}>Location</div>\n              <Card innerClassName=\"p-8 h-full w-full\">\n                <CreateInspectionInstanceMap setInspectionLat={setInspectionLat} setInspectionLng={setInspectionLng} selectAsset={selectAsset ?? undefined} inspectionLng={inspectionLng} inspectionLat={inspectionLat} mapsApiKey={loaderData.mapsApiKey ?? ''} />\n              </Card>\n            </div>\n          </div>\n          <div className=\"w-full p-2\">\n            <div className={`${subPageTitle}`}> Procedures</div>\n            <Card innerClassName=\"p-8 h-full w-full\">\n              <CreateInspectionInstanceProcedures setFilesOnInstance={setFilesOnInstance} filesOnInstance={filesOnInstance ?? []} STORAGE_URL={loaderData.STORAGE_URL ?? ''} SUPABASE_SERVICE_ROLE_KEY={loaderData.SUPABASE_SERVICE_ROLE_KEY ?? ''} />\n            </Card>\n          </div>\n          <div className=\"w-full p-2\">\n            <div className=\"flex\">\n              <Button className=\"w-40 text-left hover:underline\" variant=\"outline\" onClick={() => navigate(-1)}>\n                Cancel\n              </Button>\n              <div className=\"ml-auto\">\n                <Button submit className=\"w-40\" disabled={!!filesOnInstance?.find(file => file.uploading === true)}>\n                  Save Inspection\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Form>\n    </div>;\n}\n_s(CreateInspectionInstancePage, \"tyfedAJhi9Wt14OlLAyfmwdEuvA=\", false, function () {\n  return [useLoaderData, useActionData, useNavigate];\n});\n_c = CreateInspectionInstancePage;\nvar _c;\n$RefreshReg$(_c, \"CreateInspectionInstancePage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "_c", "_a", "_b", "_d"]
}
