{
  "version": 3,
  "sources": ["../../../app/routes/_signedIn.$orgId._editOrg.organisationMembers.tsx", "../../../app/components/page/inviteUser/inviteUser.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_signedIn.$orgId._editOrg.organisationMembers.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_signedIn.$orgId._editOrg.organisationMembers.tsx\");\n  import.meta.hot.lastModified = \"1706454925356.0059\";\n}\n// REMIX HMR END\n\nimport { useActionData, useLoaderData, useSubmit } from '@remix-run/react';\nimport { useEffect, useState } from 'react';\nimport Alert from '~/components/ui/Alert';\nimport { Avatar } from '~/components/ui/Avatar';\nimport Button from '~/components/ui/Button';\nimport { CheckBox } from '~/components/ui/Checkbox';\nimport { Dialog } from '~/components/ui/Dialog';\nimport { DropdownMenu } from '~/components/ui/DropdownMenu';\nimport { Icon } from '~/components/ui/Icon';\nimport { Pagination } from '~/components/ui/Pagination';\nimport { Popover } from '~/components/ui/Popover';\nimport { SelectInput } from '~/components/ui/SelectInput';\nimport { Table } from '~/components/ui/Table';\nimport { TextInput } from '~/components/ui/TextInput';\nimport InviteUser from '~/components/page/inviteUser/inviteUser';\nimport { getSession } from '~/cookies';\nimport { deleteMembership, getMembershipWithUserAndOrganisation, getMembershipsWithOrganisationId, pauseUnpauseMembership, resendInvite, updateMembership } from '~/endpoints/membership';\nimport { getAllRoles } from '~/endpoints/role';\nimport { importantText, secondaryText, subPageTitle, tableHeader } from '~/styles/typography';\nimport { getStorage } from '~/utils/storage.server';\nimport { createUserWithInvite } from '~/endpoints/user';\nimport { chip, chipBlueColor, chipGrayDarkColor, chipGrayLightColor, chipGreenColor, chipRedColor, filterChip } from '~/styles/genericStyles';\nimport { Card } from '~/components/ui/Card';\nimport { TableSelectBottomBar } from '~/components/ui/TableSelectBottomBar';\nexport async function action({\n  params,\n  request\n}) {\n  const body = await request.formData();\n  const orgId = parseInt(params.orgId ?? '-1');\n  const formType = body.get('_action');\n  switch (formType) {\n    case 'inviteUser':\n      const role = body.get('role');\n      const emails = body.get('emails');\n      const errorArray = [];\n      let allSuccess = true;\n      await Promise.all(emails?.split(',').map(async email => {\n        console.log('email', email);\n        const createUserResult = await createUserWithInvite({\n          email,\n          role,\n          orgId\n        });\n        if (createUserResult.error !== null) {\n          errorArray.push({\n            inviteError: createUserResult.error,\n            email: email\n          });\n          allSuccess = false;\n        }\n      }));\n      return {\n        inviteSuccess: allSuccess,\n        errorArray: errorArray\n      };\n    case 'deleteMembership':\n      {\n        const membershipIdString = body.get('membershipId');\n        const membershipId = parseInt(membershipIdString);\n        await deleteMembership({\n          membershipId\n        });\n        return null;\n      }\n    case 'deleteManyMemberships':\n      {\n        const membershipIdsString = body.get('membershipIds');\n        const membershipIdArray = membershipIdsString.split('\u00A3');\n        await Promise.all(membershipIdArray.map(async membershipIdString => {\n          const membershipId = parseInt(membershipIdString);\n          await deleteMembership({\n            membershipId\n          });\n        }));\n        return null;\n      }\n    case 'pauseUnpauseMembership':\n      {\n        const membershipId = body.get('membershipId');\n        await pauseUnpauseMembership({\n          membershipId: parseInt(membershipId)\n        });\n        return null;\n      }\n    case 'pauseUnpauseManyMemberships':\n      {\n        const membershipIdsString = body.get('membershipIds');\n        await Promise.all(membershipIdsString.split('\u00A3').map(async membershipIdString => {\n          const membershipId = parseInt(membershipIdString);\n          await pauseUnpauseMembership({\n            membershipId\n          });\n        }));\n        return null;\n      }\n    case 'changeMembersRole':\n      {\n        const membershipIdsString = body.get('membershipIds');\n        const membershipIds = membershipIdsString.split(',').map(id => parseInt(id));\n        const newRoleId = body.get('newRoleId');\n        await Promise.all(membershipIds.map(async membershipId => {\n          await updateMembership({\n            membershipId: membershipId,\n            roleId: parseInt(newRoleId)\n          });\n        }));\n        return null;\n      }\n    case 'resendInvite':\n      {\n        const membershipId = body.get('membershipId');\n        await resendInvite({\n          membershipId: parseInt(membershipId)\n        });\n        return null;\n      }\n  }\n}\nexport const loader = async ({\n  params,\n  request\n}) => {\n  const session = await getSession(request.headers.get('Cookie'));\n  const userId = session.get('userId');\n  const membershipOfCurrentUser = await getMembershipWithUserAndOrganisation({\n    userId: userId ?? -1,\n    orgId: parseInt(params.orgId ?? '-1')\n  });\n  const memberships = await getMembershipsWithOrganisationId({\n    orgId: parseInt(params.orgId ?? '-1')\n  });\n  const membershipTableData = await Promise.all(memberships.map(async membership => {\n    const imageName = membership.user?.image ?? '';\n    let imageUrl = '';\n    if (imageName) {\n      const profilePicUrlObject = getStorage().from('assetnest').getPublicUrl('profile-picture/' + imageName) ?? '';\n      imageUrl = profilePicUrlObject?.data?.publicUrl ?? '';\n    }\n    const firstName = membership.user?.firstName ?? '';\n    const lastName = membership.user?.lastName ?? '';\n    const initials = firstName[0] + lastName[0];\n    return {\n      membershipId: membership.id,\n      userImage: imageUrl,\n      userName: firstName + ' ' + lastName,\n      userInitials: initials,\n      roleName: membership.role.roleName,\n      userEmail: membership.user?.email,\n      membershipStatus: membership.status\n    };\n  }));\n  const roles = await getAllRoles();\n  return {\n    membershipTableData,\n    userCanManageUsers: membershipOfCurrentUser?.role.organisationManageUsers,\n    currentUserEmail: membershipOfCurrentUser?.user.email,\n    roles: roles.filter(role => !(role.roleName === 'Organisation Owner' && membershipOfCurrentUser?.role.roleName !== 'Organisation Owner')).sort((a, b) => {\n      return a.roleName > b.roleName ? 1 : -1;\n    })\n  };\n};\nexport default function Members() {\n  _s();\n  const loaderData = useLoaderData();\n  const actionData = useActionData();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentPage, setCurrentPage] = useState(0);\n  const [numberRecordsToDisplayOnPage, setNumberRecordsToDisplayOnPage] = useState(10);\n  const submit = useSubmit();\n  const [selectedMembershipIds, setSelectedMembershipIds] = useState([]);\n  const [selectAll, setSelectAll] = useState(false);\n  const [inviteModalVisible, setInviteModalVisible] = useState(false);\n  const [displayAlert, setDisplayAlert] = useState(false);\n  const [newRoleId, setNewRoleId] = useState(loaderData.roles[0].id);\n  const [selectedRowMembershipId, setSelectedRowMembershipId] = useState(-1);\n  const [displayEditRoleDialog, setDisplayEditRoleDialog] = useState(false);\n  const [alertMessage, setAlertMessage] = useState({\n    message: '',\n    type: 'default'\n  });\n  useEffect(() => {\n    if (actionData?.inviteSuccess === true) {\n      setInviteModalVisible(false);\n      setAlertMessage({\n        message: 'Users invited',\n        type: 'success'\n      });\n      setDisplayAlert(true);\n      setTimeout(() => setDisplayAlert(false), 5000);\n    } else if (actionData?.inviteSuccess === false) {\n      const errorEmails = actionData.errorArray.map(item => item.email);\n      setAlertMessage({\n        message: `Error inviting the following: ${errorEmails}`,\n        type: 'destructive'\n      });\n      setDisplayAlert(true);\n      setTimeout(() => setDisplayAlert(false), 5000);\n    }\n  }, [actionData]);\n  const headers = [loaderData.userCanManageUsers ? <CheckBox key=\"selectAllCheckbox\" uniqueName={'all'} checked={selectAll} onChange={value => {\n    setSelectAll(value);\n    setSelectedMembershipIds(value ? allRowsData.filter(membership => membership.userEmail !== loaderData.currentUserEmail).map(row => row.membershipId) : []);\n  }} /> : false, <div key=\"accountHeader\" className={`${tableHeader}`}>\n      Account\n    </div>, <div key=\"roleHeader\" className={`${tableHeader}`}>\n      Role\n    </div>, <div key=\"emailHeader\" className={`${tableHeader}`}>\n      Email\n    </div>, <div key=\"statusHeader\" className={`${tableHeader} pl-4`}>\n      Status\n    </div>, <div key=\"emptyDiv\" />].filter(header => header);\n  const [filterRole, setFilterRole] = useState({});\n  const [filterStatus, setFilterStatus] = useState({});\n  const filterPopoverContent = <div className=\"flex\">\n      <ul>\n        <li>ROLES</li>\n        {loaderData.roles.map(role => {\n        return <li key={role.roleName} className=\"p-2\">\n              <CheckBox uniqueName={role.roleName} onChange={() => {\n            setFilterRole(filter => {\n              const newValue = {\n                ...filter\n              };\n              newValue[role.roleName] = !newValue[role.roleName];\n              return newValue;\n            });\n          }} checked={filterRole[role.roleName]} label={role.roleName} />{' '}\n            </li>;\n      })}\n      </ul>\n      <ul>\n        <li>STATUS</li>\n        <li className=\" p-2\">\n          <CheckBox uniqueName=\"ACTIVE\" onChange={() => {\n          setFilterStatus(filter => {\n            const newValue = {\n              ...filter\n            };\n            newValue['ACTIVE'] = !newValue['ACTIVE'];\n            return newValue;\n          });\n        }} checked={filterStatus['ACTIVE']} label={'Active'} />\n        </li>\n        <li className=\" p-2\">\n          <CheckBox uniqueName=\"INACTIVE\" onChange={() => {\n          setFilterStatus(filter => {\n            const newValue = {\n              ...filter\n            };\n            newValue['INACTIVE'] = !newValue['INACTIVE'];\n            return newValue;\n          });\n        }} checked={filterStatus['INACTIVE']} label={'Inactive'} />\n        </li>\n        <li className=\" p-2\">\n          <CheckBox uniqueName=\"PENDING\" onChange={() => {\n          setFilterStatus(filter => {\n            const newValue = {\n              ...filter\n            };\n            newValue['PENDING'] = !newValue['PENDING'];\n            return newValue;\n          });\n        }} checked={filterStatus['PENDING']} label={'Pending'} />\n        </li>\n      </ul>\n    </div>;\n  const allRowsData = loaderData.membershipTableData.filter(membership => {\n    const searchTermClear = searchTerm.toLowerCase();\n    if (!membership.userName.toLowerCase().includes(searchTermClear) && !membership.userEmail.toLowerCase().includes(searchTermClear)) {\n      return false;\n    }\n    const filterRoleKeys = Object.keys(filterRole);\n    let useRoleFilter = false;\n    let membershipHasFilteredRole = false;\n    filterRoleKeys.some(key => {\n      if (filterRole[key] && membership.roleName === key) {\n        useRoleFilter = true;\n        membershipHasFilteredRole = true;\n        return true;\n      }\n      return false;\n    });\n    if (useRoleFilter && !membershipHasFilteredRole) {\n      return false;\n    }\n    const filterStatusKeys = Object.keys(filterStatus);\n    let useStatusFilter = false;\n    let membershipHasFilteredStatus = false;\n    filterStatusKeys.some(key => {\n      if (filterStatus[key]) {\n        useStatusFilter = true;\n        if (membership.membershipStatus === key) {\n          membershipHasFilteredStatus = true;\n          return true;\n        }\n      }\n      return false;\n    });\n    return !(useStatusFilter && !membershipHasFilteredStatus);\n  }).sort((aMembership, bMembership) => aMembership.userEmail > bMembership.userEmail ? 1 : -1);\n  const allRowsDataElements = allRowsData.map(membership => {\n    const membershipPending = membership.membershipStatus === 'PENDING';\n    const userProfile = <div className=\"flex items-center\">\n        <Avatar className=\"h-11 w-11 bg-primary\" imageSrc={!membershipPending ? membership.userImage : ''} fallbackText={!membershipPending ? membership.userInitials : ''} />\n        <div className={`${importantText} max-w-xs overflow-hidden text-ellipsis whitespace-nowrap pl-2 md:max-w-md`}>\n          {!membershipPending ? membership.userName : ''}\n        </div>\n      </div>;\n    return {\n      onClick: () => {},\n      content: [{\n        content: loaderData.userCanManageUsers ? loaderData.currentUserEmail !== membership.userEmail ? <CheckBox uniqueName={membership.userEmail} checked={selectedMembershipIds.includes(membership.membershipId)} onChange={() => {\n          setSelectedMembershipIds(currentSelectedUsers => {\n            setSelectAll(false);\n            if (selectedMembershipIds.includes(membership.membershipId)) {\n              return currentSelectedUsers.filter(userEmail => userEmail !== membership.membershipId);\n            } else {\n              return [...currentSelectedUsers, membership.membershipId];\n            }\n          });\n        }} /> : <div /> : false\n      }, {\n        content: userProfile\n      }, {\n        content: <div className=\"max-w-xs overflow-hidden text-ellipsis whitespace-nowrap md:max-w-md\">\n              {membership.roleName}\n            </div>\n      }, {\n        content: <div className=\"max-w-xs overflow-hidden text-ellipsis whitespace-nowrap md:max-w-md\">\n              {membership.userEmail}\n            </div>\n      }, {\n        content: <div className={`${membership.membershipStatus === 'ACTIVE' ? chipGreenColor : membership.membershipStatus === 'PENDING' ? chipBlueColor : membership.membershipStatus === 'PAUSED' ? chipGrayLightColor : membership.membershipStatus === 'INACTIVE' ? chipGrayDarkColor : chipRedColor} ${chip}`}>\n              {membership.membershipStatus}\n            </div>\n      }, {\n        content: loaderData.userCanManageUsers && loaderData.currentUserEmail !== membership.userEmail ? <DropdownMenu triggerClassName=\"w-7\" trigger={<Icon className=\"w-7\" onClick={() => {}} icon=\"threeDotsVertical\" />} dropdownMenuContent={[{\n          displayText: 'Pause / unpause',\n          onClick: () => {\n            const formData = new FormData();\n            formData.set('_action', 'pauseUnpauseMembership');\n            formData.set('membershipId', membership.membershipId.toString());\n            submit(formData, {\n              method: 'post'\n            });\n          }\n        }, {\n          displayText: 'Edit Role',\n          onClick: () => {\n            setDisplayEditRoleDialog(true);\n            setSelectedRowMembershipId(membership.membershipId);\n          }\n        }, {\n          displayText: 'Delete',\n          onClick: () => {\n            const formData = new FormData();\n            formData.set('_action', 'deleteMembership');\n            formData.set('membershipId', membership.membershipId.toString());\n            submit(formData, {\n              method: 'post'\n            });\n          }\n        }, {\n          displayText: membership.membershipStatus === 'PENDING' ? 'Resend Invite' : 'noDisplay',\n          onClick: () => {\n            const formData = new FormData();\n            formData.set('_action', 'resendInvite');\n            formData.set('membershipId', membership.membershipId.toString());\n            submit(formData, {\n              method: 'post'\n            });\n          }\n        }].filter(item => item.displayText !== 'noDisplay')} /> : <div></div>\n      }].filter(header => header.content)\n    };\n  });\n  const startCurrentPageIndex = currentPage * numberRecordsToDisplayOnPage;\n  const endCurrentPageIndex = startCurrentPageIndex + numberRecordsToDisplayOnPage;\n  const rowsToDisplay = allRowsDataElements.slice(startCurrentPageIndex, endCurrentPageIndex);\n  return <>\n      {displayAlert && <Alert variant={alertMessage.type} title={alertMessage.message} onClose={() => {\n      setDisplayAlert(false);\n    }} />}\n      <Dialog open={displayEditRoleDialog} onClose={() => {\n      setSelectedRowMembershipId(-1);\n      setDisplayEditRoleDialog(false);\n    }}>\n        <div className=\" max-md:w-64 \">\n          <div className={`${subPageTitle} pb-2`}> Select a New Role </div>\n          <SelectInput possibleValues={loaderData.roles.map(role => {\n          return {\n            value: role.id.toString(),\n            valueLabel: role.roleName\n          };\n        })} onChange={value => {\n          setNewRoleId(parseInt(value));\n        }} valueCurrent={newRoleId.toString()} noPadding />\n          <div className=\"flex w-full py-2\">\n            <div className=\"p-2\">\n              <Button className=\" w-20 \" variant=\"outline\" onClick={() => {\n              setDisplayEditRoleDialog(false);\n              setSelectedRowMembershipId(-1);\n            }}>\n                Cancel\n              </Button>\n            </div>\n            <div className=\"ml-auto p-2\">\n              <Button className=\" w-20\" onClick={() => {\n              const formData = new FormData();\n              formData.set('_action', 'changeMembersRole');\n              formData.set('membershipIds', selectedRowMembershipId === -1 ? selectedMembershipIds.join(',') : selectedRowMembershipId.toString());\n              formData.set('newRoleId', newRoleId.toString());\n              submit(formData, {\n                method: 'post'\n              });\n              setSelectedRowMembershipId(-1);\n              setDisplayEditRoleDialog(false);\n              setNewRoleId(loaderData.roles[0].id);\n            }}>\n                Save\n              </Button>\n            </div>\n          </div>\n        </div>\n      </Dialog>\n      <Dialog onClose={() => setInviteModalVisible(false)} open={inviteModalVisible}>\n        <InviteUser onCloseFunction={setInviteModalVisible} />\n      </Dialog>\n      <div className=\"flex w-full flex-col space-y-1.5  \">\n        <div className=\"p-4\">\n          <div className={`ps-2  ${secondaryText}`}>\n            Find all your team members and their associated roles here.\n          </div>\n          <div className=\"flex w-full py-1\">\n            <div className=\"flex h-20 w-96 items-center \">\n              <TextInput value={searchTerm} placeholder=\"Search Team\" onChange={newValue => setSearchTerm(newValue)} />\n            </div>\n            <div className=\" flex h-20 items-center pl-4 max-md:hidden\">\n              <Popover trigger={<Button className=\"  w-32\" variant=\"ghost\" isPopoverTrigger>\n                    <Icon icon=\"add\" /> Add Filter\n                  </Button>} contentClassName={`w-[27rem]`} content={filterPopoverContent} />\n            </div>\n            <div className=\"w-1/3 pt-3 max-md:hidden lg:w-1/2\">\n              {Object.keys(filterRole).filter(key => filterRole[key]).map((key, index) => {\n              return <div className=\"inline-block p-2\" key={`filterRole-${index}`}>\n                      <div className={`${filterChip}`} onClick={() => {\n                  setFilterRole(filter => {\n                    const newValue = {\n                      ...filter\n                    };\n                    newValue[key] = false;\n                    return newValue;\n                  });\n                }}>\n                        {key} <Icon icon=\"close\" />\n                      </div>\n                    </div>;\n            })}\n              {Object.keys(filterStatus).filter(key => filterStatus[key]).map((key, index) => {\n              const lowerCase = key.toLowerCase();\n              const formattedText = lowerCase.charAt(0).toUpperCase() + lowerCase.slice(1);\n              return <div className=\"inline-block p-2\" key={`filterStatus-${index}`}>\n                      <div className={`${filterChip}`} onClick={() => {\n                  setFilterStatus(filter => {\n                    const newValue = {\n                      ...filter\n                    };\n                    newValue[key] = false;\n                    return newValue;\n                  });\n                }}>\n                        {formattedText} <Icon icon=\"close\" />\n                      </div>\n                    </div>;\n            })}\n            </div>\n\n            {loaderData.userCanManageUsers && <div className=\"ml-auto flex h-20 w-32 items-center \">\n                <Button className={''} onClick={() => setInviteModalVisible(true)}>\n                  Invite People\n                </Button>\n              </div>}\n          </div>\n          <div className=\"p-2 py-1\">Results: {allRowsData.length}</div>\n          <div className=\"flex items-center pb-4 pt-1\">\n            <div className=\" flex w-20 items-center p-2 md:w-40\">\n              <SelectInput valueCurrent={numberRecordsToDisplayOnPage.toString()} onChange={newValue => {\n              setCurrentPage(0);\n              setNumberRecordsToDisplayOnPage(parseInt(newValue));\n            }} possibleValues={[{\n              value: '10',\n              valueLabel: '10'\n            }, {\n              value: '50',\n              valueLabel: '50'\n            }, {\n              value: '100',\n              valueLabel: '100'\n            }]} noPadding />\n            </div>\n            <div className=\"p-2 md:hidden\">\n              <Popover trigger={<Button noPadding className=\"w-12\" onClick={() => {}} variant=\"outline\">\n                    <Icon icon=\"filter\" />\n                  </Button>} contentClassName={`w-[20rem]`} content={filterPopoverContent} />\n            </div>\n          </div>\n        </div>\n        <Card outerClassName={'overflow-auto py-1'} innerClassName=\"w-full\">\n          <Table headers={headers} rows={rowsToDisplay} />\n        </Card>\n        {Math.ceil(allRowsData.length / numberRecordsToDisplayOnPage) - 1 > 0 && <div className=\"flex items-center justify-center py-4\">\n            <Pagination totalNumberPages={Math.ceil(allRowsData.length / numberRecordsToDisplayOnPage) - 1} selectedPage={currentPage} onPrevClick={() => {\n          setCurrentPage(currentValue => currentValue === 0 ? 0 : currentValue - 1);\n        }} onNextClick={() => {\n          setCurrentPage(currentValue => {\n            return currentValue === Math.ceil(allRowsData.length / numberRecordsToDisplayOnPage) - 1 ? 0 : currentValue + 1;\n          });\n        }} goPage={newPage => {\n          setCurrentPage(newPage);\n        }} />\n          </div>}\n        {selectedMembershipIds.length > 0 && <TableSelectBottomBar numberSelected={selectedMembershipIds.length}>\n            <div className=\" p-2\">\n              <Button onClick={() => {\n            const formData = new FormData();\n            formData.set('_action', 'pauseUnpauseManyMemberships');\n            formData.set('membershipIds', selectedMembershipIds.join('\u00A3'));\n            submit(formData, {\n              method: 'post'\n            });\n          }} variant=\"outline\">\n                <Icon icon=\"pause\" className=\"pr-2\" />\n                Pause\n              </Button>\n            </div>\n            <div className=\" p-2\">\n              <Button onClick={() => setDisplayEditRoleDialog(true)} variant=\"outline\">\n                <Icon icon=\"edit\" className=\"pr-2\" />\n                Edit Role\n              </Button>\n            </div>\n            <div className=\" p-2\">\n              <Button variant=\"outline\" onClick={() => {\n            const formData = new FormData();\n            formData.set('_action', 'deleteManyMemberships');\n            formData.set('membershipIds', selectedMembershipIds.join('\u00A3'));\n            submit(formData, {\n              method: 'post'\n            });\n            setSelectedMembershipIds([]);\n          }}>\n                <Icon icon=\"bin\" className=\"pr-2\" />\n                Delete\n              </Button>\n            </div>\n          </TableSelectBottomBar>}\n      </div>\n    </>;\n}\n_s(Members, \"nH3V+IyMwC/uQ3nJ6ydeD1QADE4=\", false, function () {\n  return [useLoaderData, useActionData, useSubmit];\n});\n_c = Members;\nvar _c;\n$RefreshReg$(_c, \"Members\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/page/inviteUser/inviteUser.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/page/inviteUser/inviteUser.tsx\");\n  import.meta.hot.lastModified = \"1706454925342.157\";\n}\n// REMIX HMR END\n\nimport { Form, useLoaderData } from '@remix-run/react';\nimport { useState } from 'react';\nimport Button from '~/components/ui/Button';\nimport { SelectInput } from '~/components/ui/SelectInput';\nimport { ReactMultiEmail } from '~/components/ui/ReactMultiEmail';\nimport { pageTitle, secondaryText } from '~/styles/typography';\nimport { LabelShad } from '~/components/ui/shadUi/ui/label';\nexport default function InviteUser({\n  onCloseFunction\n}) {\n  _s();\n  const loaderData = useLoaderData();\n  const possibleRoleValues = loaderData.roles.map(role => {\n    return {\n      value: role.roleName,\n      valueLabel: role.roleName\n    };\n  });\n  const [emails, setEmails] = useState([]);\n  const [role, setRole] = useState(possibleRoleValues[0].value);\n  return <>\n      <div className={`${pageTitle}`}>Invite User</div>\n      <Form method=\"post\">\n        <div className={`${secondaryText} py-4`}>\n          Enter the email addresses of the users you wish to invite to this\n          organisation.\n        </div>\n        <LabelShad className={'text-s pb-1 pl-2 text-left font-semibold'}>\n          Email Addresses\n        </LabelShad>\n        <div className={'pr-4'}>\n          <ReactMultiEmail className={'@apply tap-highlight-color-transparent leading-14 align-content-start relative left-2 m-0 flex max-w-full flex-1 flex-wrap items-center rounded-md border bg-white px-2 py-2 text-left text-black shadow outline-none transition duration-100 ease-in-out'} placeholder=\"Enter emails to invite\" emailsInput={emails} onChange={_emails => {\n          setEmails(_emails);\n        }} autoFocus={true} getLabel={(email, index, removeEmail) => {\n          return <div className={'@apply m-1 flex max-w-full items-center justify-start rounded-md border-transparent bg-gray-200 bg-none p-1.5 align-baseline text-sm font-semibold leading-4 text-gray-600 transition duration-100 ease-in-out'} key={index}>\n                  <div data-tag-item=\"\" className={'@apply max-w-full overflow-hidden'}>\n                    {email}\n                  </div>\n                  <span data-tag-handle=\"\" className={'ml-2 cursor-pointer'} onClick={() => removeEmail(index)}>\n                    \u00D7\n                  </span>\n                </div>;\n        }} />\n        </div>\n        <SelectInput name=\"role\" label=\"Role\" valueCurrent={role} onChange={value => setRole(value)} possibleValues={possibleRoleValues} />\n        <Button className={'ml-2 mr-4'} variant=\"outline\" onClick={() => onCloseFunction(false)}>\n          Cancel\n        </Button>\n        <Button className={'mr-4'} submit={true}>\n          Invite\n        </Button>\n        <input type=\"hidden\" name=\"_action\" value=\"inviteUser\" />\n        <input type=\"hidden\" name=\"emails\" value={emails} />\n      </Form>\n    </>;\n}\n_s(InviteUser, \"WEAbDsO1gUlzE/DYWWdiRtDalro=\", false, function () {\n  return [useLoaderData];\n});\n_c = InviteUser;\nvar _c;\n$RefreshReg$(_c, \"InviteUser\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_react", "role", "import_jsx_dev_runtime", "_s", "_s", "_c"]
}
