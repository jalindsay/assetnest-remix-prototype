{
  "version": 3,
  "sources": ["../../../app/components/ui/ReactMultiEmail.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/ui/ReactMultiEmail.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/ui/ReactMultiEmail.tsx\");\n  import.meta.hot.lastModified = \"1706454925344.6772\";\n}\n// REMIX HMR END\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { emailValid } from '~/utils/emailValidator';\n/**\n * This function is an extracted version of the ReactMultiEmail component.\n * At some point this function will need to be refactored, or more likely re-written ourselves.\n * We may want to add features such as real time checks for existing user emails and\n * editing emails in place.\n */\nexport function ReactMultiEmail({\n  className,\n  placeholder,\n  emailsInput,\n  onChange,\n  autoFocus,\n  getLabel,\n  validateEmail\n}) {\n  _s();\n  const emailInputRef = useRef(null);\n  const [focused, setFocused] = useState(false);\n  const [emails, setEmails] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [spinning, setSpinning] = useState(false);\n  let delimiter = `[' ',;]`;\n  const initialEmailAddress = emails => {\n    if (typeof emails === 'undefined') return [];\n    return emails.filter(email => emailValid(email));\n  };\n  const findEmailAddress = useCallback(async (value, isEnter) => {\n    const validEmails = [];\n    let inputValue = '';\n    const re = new RegExp(delimiter, 'g');\n    const isEmail = validateEmail || emailValid;\n    const addEmails = email => {\n      validEmails.push(email);\n      return true;\n    };\n    if (value !== '') {\n      if (re.test(value)) {\n        const setArr = new Set(value.split(re).filter(n => n));\n        const arr = [...setArr];\n        do {\n          const validateResult = emailValid('' + arr[0].trim());\n          if (validateResult) {\n            addEmails('' + arr.shift());\n          } else {\n            inputValue = '' + arr.shift();\n          }\n        } while (arr.length);\n      } else {\n        if (isEnter) {\n          const validateResult = isEmail(value);\n          if (typeof validateResult === 'boolean') {\n            if (validateResult) {\n              addEmails(value);\n            } else {\n              inputValue = value;\n            }\n          } else {\n            // handle promise\n            setSpinning(true);\n            if ((await validateEmail?.(value)) === true) {\n              addEmails(value);\n              setSpinning(false);\n            } else {\n              inputValue = value;\n            }\n          }\n        } else {\n          inputValue = value;\n        }\n      }\n    }\n    setEmails([...emails, ...validEmails]);\n    setInputValue(inputValue);\n    if (validEmails.length) {\n      onChange?.([...emails, ...validEmails]);\n    }\n  }, [delimiter, emails, onChange, validateEmail]);\n  const onChangeInputValue = useCallback(async value => {\n    await findEmailAddress(value);\n  }, [findEmailAddress]);\n  const removeEmail = useCallback((index, isDisabled) => {\n    if (isDisabled) {\n      return;\n    }\n    const _emails = [...emails.slice(0, index), ...emails.slice(index + 1)];\n    setEmails(_emails);\n    onChange?.(_emails);\n  }, [emails, onChange]);\n  const handleOnKeydown = useCallback(e => {\n    switch (e.key) {\n      case 'Enter':\n        e.preventDefault();\n        break;\n      case 'Backspace':\n        if (!e.currentTarget.value) {\n          removeEmail(emails.length - 1, false);\n        }\n        break;\n      default:\n    }\n  }, [emails.length, removeEmail]);\n  const handleOnKeyup = useCallback(async e => {\n    switch (e.key) {\n      case 'Enter':\n        await findEmailAddress(e.currentTarget.value, true);\n        break;\n      default:\n    }\n  }, [findEmailAddress]);\n  const handleOnChange = useCallback(async e => await onChangeInputValue(e.currentTarget.value), [onChangeInputValue]);\n  const handleOnBlur = useCallback(async () => {\n    setFocused(false);\n  }, []);\n  useEffect(() => {\n    setEmails(initialEmailAddress(emailsInput));\n  }, [emailsInput]);\n  return <div className={`${className} w-full ${'react-multi-email'} ${focused ? '@apply border border-input bg-white' : ''} ${inputValue === '' && emails.length === 0 ? 'empty' : ''}`} onClick={() => emailInputRef.current?.focus()}>\n      {placeholder ? <span data-placeholder=\"\" className={'@apply absolute left-2 top-1/3 hidden px-2 py-1 leading-4'}>\n          {placeholder}\n        </span> : null}\n      <div className={'data-labels'} style={{\n      opacity: spinning ? 0.45 : 1.0,\n      display: 'contents',\n      flexWrap: 'inherit'\n    }}>\n        {emails.map((email, index) => getLabel(email, index, removeEmail))}\n      </div>\n      <input style={{\n      opacity: spinning ? 0.45 : 1.0\n    }} ref={emailInputRef} type=\"text\" value={inputValue} onBlur={handleOnBlur} onChange={handleOnChange} onKeyDown={handleOnKeydown} onKeyUp={handleOnKeyup} autoFocus={autoFocus} className={'border-0 border-none outline-none focus:ring-0'} />\n    </div>;\n}\n_s(ReactMultiEmail, \"XpRqY+Jfs4ebtLMvLzPDrzugzEw=\");\n_c = ReactMultiEmail;\nvar _c;\n$RefreshReg$(_c, \"ReactMultiEmail\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["emails", "inputValue"]
}
