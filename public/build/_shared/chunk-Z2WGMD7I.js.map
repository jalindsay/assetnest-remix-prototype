{
  "version": 3,
  "sources": ["../../../app/components/ui/shadUi/ui/avatar.tsx", "../../../node_modules/@radix-ui/react-avatar/dist/packages/react/avatar/src/index.ts", "../../../node_modules/@radix-ui/react-avatar/dist/packages/react/avatar/src/Avatar.tsx", "../../../app/components/ui/Avatar.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/ui/shadUi/ui/avatar.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/ui/shadUi/ui/avatar.tsx\");\n  import.meta.hot.lastModified = \"1705519263366.0042\";\n}\n// REMIX HMR END\n\nimport * as React from 'react';\nimport * as AvatarPrimitive from '@radix-ui/react-avatar';\nimport { cn } from '../utils';\nconst AvatarShad = React.forwardRef(_c = ({\n  className,\n  ...props\n}, ref) => <AvatarPrimitive.Root ref={ref} className={cn('relative flex h-10 w-10 shrink-0 overflow-hidden rounded', className)} {...props} />);\n_c2 = AvatarShad;\nAvatarShad.displayName = AvatarPrimitive.Root.displayName;\nconst AvatarImageShad = React.forwardRef(_c3 = ({\n  className,\n  ...props\n}, ref) => <AvatarPrimitive.Image ref={ref} className={cn('aspect-square h-full w-full', className)} {...props} />);\n_c4 = AvatarImageShad;\nAvatarImageShad.displayName = AvatarPrimitive.Image.displayName;\nconst AvatarFallbackShad = React.forwardRef(_c5 = ({\n  className,\n  ...props\n}, ref) => <AvatarPrimitive.Fallback ref={ref} className={cn('flex h-full w-full items-center justify-center rounded', className)} {...props} />);\n_c6 = AvatarFallbackShad;\nAvatarFallbackShad.displayName = AvatarPrimitive.Fallback.displayName;\nexport { AvatarShad, AvatarImageShad, AvatarFallbackShad };\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"AvatarShad$React.forwardRef\");\n$RefreshReg$(_c2, \"AvatarShad\");\n$RefreshReg$(_c3, \"AvatarImageShad$React.forwardRef\");\n$RefreshReg$(_c4, \"AvatarImageShad\");\n$RefreshReg$(_c5, \"AvatarFallbackShad$React.forwardRef\");\n$RefreshReg$(_c6, \"AvatarFallbackShad\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "export {\n  createAvatarScope,\n  //\n  Avatar,\n  AvatarImage,\n  AvatarFallback,\n  //\n  Root,\n  Image,\n  Fallback,\n} from './Avatar';\nexport type { AvatarProps, AvatarImageProps, AvatarFallbackProps } from './Avatar';\n", "import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Avatar\n * -----------------------------------------------------------------------------------------------*/\n\nconst AVATAR_NAME = 'Avatar';\n\ntype ScopedProps<P> = P & { __scopeAvatar?: Scope };\nconst [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);\n\ntype ImageLoadingStatus = 'idle' | 'loading' | 'loaded' | 'error';\n\ntype AvatarContextValue = {\n  imageLoadingStatus: ImageLoadingStatus;\n  onImageLoadingStatusChange(status: ImageLoadingStatus): void;\n};\n\nconst [AvatarProvider, useAvatarContext] = createAvatarContext<AvatarContextValue>(AVATAR_NAME);\n\ntype AvatarElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface AvatarProps extends PrimitiveSpanProps {}\n\nconst Avatar = React.forwardRef<AvatarElement, AvatarProps>(\n  (props: ScopedProps<AvatarProps>, forwardedRef) => {\n    const { __scopeAvatar, ...avatarProps } = props;\n    const [imageLoadingStatus, setImageLoadingStatus] = React.useState<ImageLoadingStatus>('idle');\n    return (\n      <AvatarProvider\n        scope={__scopeAvatar}\n        imageLoadingStatus={imageLoadingStatus}\n        onImageLoadingStatusChange={setImageLoadingStatus}\n      >\n        <Primitive.span {...avatarProps} ref={forwardedRef} />\n      </AvatarProvider>\n    );\n  }\n);\n\nAvatar.displayName = AVATAR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AvatarImage\n * -----------------------------------------------------------------------------------------------*/\n\nconst IMAGE_NAME = 'AvatarImage';\n\ntype AvatarImageElement = React.ElementRef<typeof Primitive.img>;\ntype PrimitiveImageProps = Radix.ComponentPropsWithoutRef<typeof Primitive.img>;\ninterface AvatarImageProps extends PrimitiveImageProps {\n  onLoadingStatusChange?: (status: ImageLoadingStatus) => void;\n}\n\nconst AvatarImage = React.forwardRef<AvatarImageElement, AvatarImageProps>(\n  (props: ScopedProps<AvatarImageProps>, forwardedRef) => {\n    const { __scopeAvatar, src, onLoadingStatusChange = () => {}, ...imageProps } = props;\n    const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);\n    const imageLoadingStatus = useImageLoadingStatus(src);\n    const handleLoadingStatusChange = useCallbackRef((status: ImageLoadingStatus) => {\n      onLoadingStatusChange(status);\n      context.onImageLoadingStatusChange(status);\n    });\n\n    useLayoutEffect(() => {\n      if (imageLoadingStatus !== 'idle') {\n        handleLoadingStatusChange(imageLoadingStatus);\n      }\n    }, [imageLoadingStatus, handleLoadingStatusChange]);\n\n    return imageLoadingStatus === 'loaded' ? (\n      <Primitive.img {...imageProps} ref={forwardedRef} src={src} />\n    ) : null;\n  }\n);\n\nAvatarImage.displayName = IMAGE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AvatarFallback\n * -----------------------------------------------------------------------------------------------*/\n\nconst FALLBACK_NAME = 'AvatarFallback';\n\ntype AvatarFallbackElement = React.ElementRef<typeof Primitive.span>;\ninterface AvatarFallbackProps extends PrimitiveSpanProps {\n  delayMs?: number;\n}\n\nconst AvatarFallback = React.forwardRef<AvatarFallbackElement, AvatarFallbackProps>(\n  (props: ScopedProps<AvatarFallbackProps>, forwardedRef) => {\n    const { __scopeAvatar, delayMs, ...fallbackProps } = props;\n    const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);\n    const [canRender, setCanRender] = React.useState(delayMs === undefined);\n\n    React.useEffect(() => {\n      if (delayMs !== undefined) {\n        const timerId = window.setTimeout(() => setCanRender(true), delayMs);\n        return () => window.clearTimeout(timerId);\n      }\n    }, [delayMs]);\n\n    return canRender && context.imageLoadingStatus !== 'loaded' ? (\n      <Primitive.span {...fallbackProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nAvatarFallback.displayName = FALLBACK_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction useImageLoadingStatus(src?: string) {\n  const [loadingStatus, setLoadingStatus] = React.useState<ImageLoadingStatus>('idle');\n\n  useLayoutEffect(() => {\n    if (!src) {\n      setLoadingStatus('error');\n      return;\n    }\n\n    let isMounted = true;\n    const image = new window.Image();\n\n    const updateStatus = (status: ImageLoadingStatus) => () => {\n      if (!isMounted) return;\n      setLoadingStatus(status);\n    };\n\n    setLoadingStatus('loading');\n    image.onload = updateStatus('loaded');\n    image.onerror = updateStatus('error');\n    image.src = src;\n\n    return () => {\n      isMounted = false;\n    };\n  }, [src]);\n\n  return loadingStatus;\n}\nconst Root = Avatar;\nconst Image = AvatarImage;\nconst Fallback = AvatarFallback;\n\nexport {\n  createAvatarScope,\n  //\n  Avatar,\n  AvatarImage,\n  AvatarFallback,\n  //\n  Root,\n  Image,\n  Fallback,\n};\nexport type { AvatarProps, AvatarImageProps, AvatarFallbackProps };\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/ui/Avatar.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/ui/Avatar.tsx\");\n  import.meta.hot.lastModified = \"1705519263362.2974\";\n}\n// REMIX HMR END\n\nimport { AvatarFallbackShad, AvatarImageShad, AvatarShad } from '~/components/ui/shadUi/ui/avatar';\nexport function Avatar({\n  fallbackText,\n  imageSrc,\n  imageAltText,\n  onClick,\n  className,\n  imageClassName\n}) {\n  return <AvatarShad className={className} onClick={onClick}>\n      <AvatarImageShad src={imageSrc} alt={imageAltText} className={imageClassName} />\n      <AvatarFallbackShad>{fallbackText}</AvatarFallbackShad>\n    </AvatarShad>;\n}\n_c = Avatar;\nvar _c;\n$RefreshReg$(_c, \"Avatar\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["AVATAR_NAME", "createAvatarContext", "createAvatarScope", "createContextScope", "AvatarProvider", "useAvatarContext", "Avatar", "React", "props", "forwardedRef", "avatarProps", "imageLoadingStatus", "setImageLoadingStatus", "$8NyvN$createElement", "__scopeAvatar", "IMAGE_NAME", "AvatarImage", "React", "props", "forwardedRef", "imageProps", "context", "useAvatarContext", "__scopeAvatar", "imageLoadingStatus", "useImageLoadingStatus", "src", "handleLoadingStatusChange", "useCallbackRef", "status", "onLoadingStatusChange", "onImageLoadingStatusChange", "useLayoutEffect", "$8NyvN$createElement", "FALLBACK_NAME", "AvatarFallback", "React", "props", "forwardedRef", "fallbackProps", "context", "useAvatarContext", "__scopeAvatar", "canRender", "setCanRender", "delayMs", "undefined", "timerId", "window", "setTimeout", "clearTimeout", "imageLoadingStatus", "$8NyvN$createElement", "useImageLoadingStatus", "src", "loadingStatus", "setLoadingStatus", "React", "useLayoutEffect", "isMounted", "image", "window", "Image", "updateStatus", "status", "onload", "onerror", "Root", "Avatar", "AvatarImage", "Fallback", "AvatarFallback", "import_jsx_dev_runtime", "_c"]
}
