{
  "version": 3,
  "sources": ["../../../app/components/ui/shadUi/ui/tabs.tsx", "../../../node_modules/@radix-ui/react-tabs/dist/packages/react/tabs/src/index.ts", "../../../node_modules/@radix-ui/react-tabs/dist/packages/react/tabs/src/Tabs.tsx", "../../../app/components/ui/Tabs.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/ui/shadUi/ui/tabs.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/ui/shadUi/ui/tabs.tsx\");\n  import.meta.hot.lastModified = \"1705519263367.5662\";\n}\n// REMIX HMR END\n\nimport * as React from 'react';\nimport * as TabsPrimitive from '@radix-ui/react-tabs';\nimport { cn } from '~/components/ui/shadUi/utils';\nconst Tabs = TabsPrimitive.Root;\nconst TabsList = React.forwardRef(_c = ({\n  className,\n  ...props\n}, ref) => <TabsPrimitive.List ref={ref} className={cn('inline-flex h-10 items-center justify-center rounded-md bg-gray-200 p-1 ', className)} {...props} />);\n_c2 = TabsList;\nTabsList.displayName = TabsPrimitive.List.displayName;\nconst TabsTrigger = React.forwardRef(_c3 = ({\n  className,\n  ...props\n}, ref) => <TabsPrimitive.Trigger ref={ref} className={cn('inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium text-gray-700 ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:text-gray-900 data-[state=active]:shadow-sm', className)} {...props} />);\n_c4 = TabsTrigger;\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\nconst TabsContent = React.forwardRef(_c5 = ({\n  className,\n  ...props\n}, ref) => <TabsPrimitive.Content ref={ref} className={cn('mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2', className)} {...props} />);\n_c6 = TabsContent;\nTabsContent.displayName = TabsPrimitive.Content.displayName;\nexport { Tabs as TabsShad, TabsList as TabsListShad, TabsTrigger as TabsTriggerShad, TabsContent as TabsContentShad };\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"TabsList$React.forwardRef\");\n$RefreshReg$(_c2, \"TabsList\");\n$RefreshReg$(_c3, \"TabsTrigger$React.forwardRef\");\n$RefreshReg$(_c4, \"TabsTrigger\");\n$RefreshReg$(_c5, \"TabsContent$React.forwardRef\");\n$RefreshReg$(_c6, \"TabsContent\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "export {\n  createTabsScope,\n  //\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  //\n  Root,\n  List,\n  Trigger,\n  Content,\n} from './Tabs';\nexport type { TabsProps, TabsListProps, TabsTriggerProps, TabsContentProps } from './Tabs';\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Tabs\n * -----------------------------------------------------------------------------------------------*/\n\nconst TABS_NAME = 'Tabs';\n\ntype ScopedProps<P> = P & { __scopeTabs?: Scope };\nconst [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [\n  createRovingFocusGroupScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype TabsContextValue = {\n  baseId: string;\n  value?: string;\n  onValueChange: (value: string) => void;\n  orientation?: TabsProps['orientation'];\n  dir?: TabsProps['dir'];\n  activationMode?: TabsProps['activationMode'];\n};\n\nconst [TabsProvider, useTabsContext] = createTabsContext<TabsContextValue>(TABS_NAME);\n\ntype TabsElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = Radix.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface TabsProps extends PrimitiveDivProps {\n  /** The value for the selected tab, if controlled */\n  value?: string;\n  /** The value of the tab to select by default, if uncontrolled */\n  defaultValue?: string;\n  /** A function called when a new tab is selected */\n  onValueChange?: (value: string) => void;\n  /**\n   * The orientation the tabs are layed out.\n   * Mainly so arrow navigation is done accordingly (left & right vs. up & down)\n   * @defaultValue horizontal\n   */\n  orientation?: RovingFocusGroupProps['orientation'];\n  /**\n   * The direction of navigation between toolbar items.\n   */\n  dir?: RovingFocusGroupProps['dir'];\n  /**\n   * Whether a tab is activated automatically or manually.\n   * @defaultValue automatic\n   * */\n  activationMode?: 'automatic' | 'manual';\n}\n\nconst Tabs = React.forwardRef<TabsElement, TabsProps>(\n  (props: ScopedProps<TabsProps>, forwardedRef) => {\n    const {\n      __scopeTabs,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      orientation = 'horizontal',\n      dir,\n      activationMode = 'automatic',\n      ...tabsProps\n    } = props;\n    const direction = useDirection(dir);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue,\n    });\n\n    return (\n      <TabsProvider\n        scope={__scopeTabs}\n        baseId={useId()}\n        value={value}\n        onValueChange={setValue}\n        orientation={orientation}\n        dir={direction}\n        activationMode={activationMode}\n      >\n        <Primitive.div\n          dir={direction}\n          data-orientation={orientation}\n          {...tabsProps}\n          ref={forwardedRef}\n        />\n      </TabsProvider>\n    );\n  }\n);\n\nTabs.displayName = TABS_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TabsList\n * -----------------------------------------------------------------------------------------------*/\n\nconst TAB_LIST_NAME = 'TabsList';\n\ntype TabsListElement = React.ElementRef<typeof Primitive.div>;\ninterface TabsListProps extends PrimitiveDivProps {\n  loop?: RovingFocusGroupProps['loop'];\n}\n\nconst TabsList = React.forwardRef<TabsListElement, TabsListProps>(\n  (props: ScopedProps<TabsListProps>, forwardedRef) => {\n    const { __scopeTabs, loop = true, ...listProps } = props;\n    const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);\n    return (\n      <RovingFocusGroup.Root\n        asChild\n        {...rovingFocusGroupScope}\n        orientation={context.orientation}\n        dir={context.dir}\n        loop={loop}\n      >\n        <Primitive.div\n          role=\"tablist\"\n          aria-orientation={context.orientation}\n          {...listProps}\n          ref={forwardedRef}\n        />\n      </RovingFocusGroup.Root>\n    );\n  }\n);\n\nTabsList.displayName = TAB_LIST_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TabsTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'TabsTrigger';\n\ntype TabsTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface TabsTriggerProps extends PrimitiveButtonProps {\n  value: string;\n}\n\nconst TabsTrigger = React.forwardRef<TabsTriggerElement, TabsTriggerProps>(\n  (props: ScopedProps<TabsTriggerProps>, forwardedRef) => {\n    const { __scopeTabs, value, disabled = false, ...triggerProps } = props;\n    const context = useTabsContext(TRIGGER_NAME, __scopeTabs);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);\n    const triggerId = makeTriggerId(context.baseId, value);\n    const contentId = makeContentId(context.baseId, value);\n    const isSelected = value === context.value;\n    return (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!disabled}\n        active={isSelected}\n      >\n        <Primitive.button\n          type=\"button\"\n          role=\"tab\"\n          aria-selected={isSelected}\n          aria-controls={contentId}\n          data-state={isSelected ? 'active' : 'inactive'}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          id={triggerId}\n          {...triggerProps}\n          ref={forwardedRef}\n          onMouseDown={composeEventHandlers(props.onMouseDown, (event) => {\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click)\n            if (!disabled && event.button === 0 && event.ctrlKey === false) {\n              context.onValueChange(value);\n            } else {\n              // prevent focus to avoid accidental activation\n              event.preventDefault();\n            }\n          })}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            if ([' ', 'Enter'].includes(event.key)) context.onValueChange(value);\n          })}\n          onFocus={composeEventHandlers(props.onFocus, () => {\n            // handle \"automatic\" activation if necessary\n            // ie. activate tab following focus\n            const isAutomaticActivation = context.activationMode !== 'manual';\n            if (!isSelected && !disabled && isAutomaticActivation) {\n              context.onValueChange(value);\n            }\n          })}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nTabsTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TabsContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'TabsContent';\n\ntype TabsContentElement = React.ElementRef<typeof Primitive.div>;\ninterface TabsContentProps extends PrimitiveDivProps {\n  value: string;\n\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst TabsContent = React.forwardRef<TabsContentElement, TabsContentProps>(\n  (props: ScopedProps<TabsContentProps>, forwardedRef) => {\n    const { __scopeTabs, value, forceMount, children, ...contentProps } = props;\n    const context = useTabsContext(CONTENT_NAME, __scopeTabs);\n    const triggerId = makeTriggerId(context.baseId, value);\n    const contentId = makeContentId(context.baseId, value);\n    const isSelected = value === context.value;\n    const isMountAnimationPreventedRef = React.useRef(isSelected);\n\n    React.useEffect(() => {\n      const rAF = requestAnimationFrame(() => (isMountAnimationPreventedRef.current = false));\n      return () => cancelAnimationFrame(rAF);\n    }, []);\n\n    return (\n      <Presence present={forceMount || isSelected}>\n        {({ present }) => (\n          <Primitive.div\n            data-state={isSelected ? 'active' : 'inactive'}\n            data-orientation={context.orientation}\n            role=\"tabpanel\"\n            aria-labelledby={triggerId}\n            hidden={!present}\n            id={contentId}\n            tabIndex={0}\n            {...contentProps}\n            ref={forwardedRef}\n            style={{\n              ...props.style,\n              animationDuration: isMountAnimationPreventedRef.current ? '0s' : undefined,\n            }}\n          >\n            {present && children}\n          </Primitive.div>\n        )}\n      </Presence>\n    );\n  }\n);\n\nTabsContent.displayName = CONTENT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction makeTriggerId(baseId: string, value: string) {\n  return `${baseId}-trigger-${value}`;\n}\n\nfunction makeContentId(baseId: string, value: string) {\n  return `${baseId}-content-${value}`;\n}\n\nconst Root = Tabs;\nconst List = TabsList;\nconst Trigger = TabsTrigger;\nconst Content = TabsContent;\n\nexport {\n  createTabsScope,\n  //\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  //\n  Root,\n  List,\n  Trigger,\n  Content,\n};\nexport type { TabsProps, TabsListProps, TabsTriggerProps, TabsContentProps };\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/ui/Tabs.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/ui/Tabs.tsx\");\n  import.meta.hot.lastModified = \"1705519263365.3162\";\n}\n// REMIX HMR END\n\nimport { TabsShad, TabsListShad, TabsTriggerShad } from '~/components/ui/shadUi/ui/tabs';\nexport function Tabs({\n  defaultValue,\n  className,\n  onValueChange,\n  tabs,\n  value\n}) {\n  return <TabsShad defaultValue={defaultValue} onValueChange={onValueChange} className={className} value={value}>\n      <TabsListShad>\n        {tabs.map(item => <TabsTriggerShad value={item.value} key={item.value}>\n            {item.valueLabel}\n          </TabsTriggerShad>)}\n      </TabsListShad>\n    </TabsShad>;\n}\n_c = Tabs;\nvar _c;\n$RefreshReg$(_c, \"Tabs\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["TABS_NAME", "createTabsContext", "createTabsScope", "createContextScope", "createRovingFocusGroupScope", "useRovingFocusGroupScope", "TabsProvider", "useTabsContext", "Tabs", "React", "props", "forwardedRef", "value", "valueProp", "tabsProps", "direction", "useDirection", "dir", "setValue", "useControllableState", "prop", "onChange", "onValueChange", "defaultProp", "defaultValue", "$1IHzk$createElement", "__scopeTabs", "useId", "orientation", "TAB_LIST_NAME", "TabsList", "React", "props", "forwardedRef", "listProps", "context", "useTabsContext", "__scopeTabs", "rovingFocusGroupScope", "useRovingFocusGroupScope", "$1IHzk$createElement", "orientation", "dir", "TRIGGER_NAME", "TabsTrigger", "React", "props", "forwardedRef", "triggerProps", "context", "useTabsContext", "__scopeTabs", "rovingFocusGroupScope", "useRovingFocusGroupScope", "triggerId", "makeTriggerId", "baseId", "value", "contentId", "makeContentId", "isSelected", "$1IHzk$createElement", "disabled", "undefined", "composeEventHandlers", "onMouseDown", "event", "button", "ctrlKey", "onValueChange", "preventDefault", "onKeyDown", "includes", "key", "onFocus", "isAutomaticActivation", "activationMode", "CONTENT_NAME", "TabsContent", "React", "props", "forwardedRef", "contentProps", "context", "useTabsContext", "__scopeTabs", "triggerId", "makeTriggerId", "baseId", "value", "contentId", "makeContentId", "isSelected", "isMountAnimationPreventedRef", "rAF", "requestAnimationFrame", "current", "cancelAnimationFrame", "$1IHzk$createElement", "forceMount", "present", "orientation", "style", "animationDuration", "undefined", "children", "makeTriggerId", "baseId", "value", "makeContentId", "Root", "Tabs", "List", "TabsList", "Trigger", "TabsTrigger", "Content", "TabsContent", "import_jsx_dev_runtime", "Tabs", "_c"]
}
