{
  "version": 3,
  "sources": ["../../../app/components/ui/shadUi/ui/hover-card.tsx", "../../../node_modules/@radix-ui/react-hover-card/dist/packages/react/hover-card/src/index.ts", "../../../node_modules/@radix-ui/react-hover-card/dist/packages/react/hover-card/src/HoverCard.tsx", "../../../app/components/ui/HoverCard.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/ui/shadUi/ui/hover-card.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/ui/shadUi/ui/hover-card.tsx\");\n  import.meta.hot.lastModified = \"1705519263366.6401\";\n}\n// REMIX HMR END\n\nimport * as React from 'react';\nimport * as HoverCardPrimitive from '@radix-ui/react-hover-card';\nimport { cn } from '~/components/ui/shadUi/utils';\nconst HoverCardShad = HoverCardPrimitive.Root;\nconst HoverCardTriggerShad = HoverCardPrimitive.Trigger;\nconst HoverCardContentShad = React.forwardRef(_c = ({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}, ref) => <HoverCardPrimitive.Content ref={ref} align={align} sideOffset={sideOffset} className={cn('z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2', className)} {...props} />);\n_c2 = HoverCardContentShad;\nHoverCardContentShad.displayName = HoverCardPrimitive.Content.displayName;\nexport { HoverCardShad, HoverCardTriggerShad, HoverCardContentShad };\nvar _c, _c2;\n$RefreshReg$(_c, \"HoverCardContentShad$React.forwardRef\");\n$RefreshReg$(_c2, \"HoverCardContentShad\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "export {\n  createHoverCardScope,\n  //\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardPortal,\n  HoverCardContent,\n  HoverCardArrow,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Content,\n  Arrow,\n} from './HoverCard';\nexport type {\n  HoverCardProps,\n  HoverCardTriggerProps,\n  HoverCardPortalProps,\n  HoverCardContentProps,\n  HoverCardArrowProps,\n} from './HoverCard';\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCard\n * -----------------------------------------------------------------------------------------------*/\n\nlet originalBodyUserSelect: string;\n\nconst HOVERCARD_NAME = 'HoverCard';\n\ntype ScopedProps<P> = P & { __scopeHoverCard?: Scope };\nconst [createHoverCardContext, createHoverCardScope] = createContextScope(HOVERCARD_NAME, [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype HoverCardContextValue = {\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpen(): void;\n  onClose(): void;\n  onDismiss(): void;\n  hasSelectionRef: React.MutableRefObject<boolean>;\n  isPointerDownOnContentRef: React.MutableRefObject<boolean>;\n};\n\nconst [HoverCardProvider, useHoverCardContext] =\n  createHoverCardContext<HoverCardContextValue>(HOVERCARD_NAME);\n\ninterface HoverCardProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  openDelay?: number;\n  closeDelay?: number;\n}\n\nconst HoverCard: React.FC<HoverCardProps> = (props: ScopedProps<HoverCardProps>) => {\n  const {\n    __scopeHoverCard,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    openDelay = 700,\n    closeDelay = 300,\n  } = props;\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const openTimerRef = React.useRef(0);\n  const closeTimerRef = React.useRef(0);\n  const hasSelectionRef = React.useRef(false);\n  const isPointerDownOnContentRef = React.useRef(false);\n\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  const handleOpen = React.useCallback(() => {\n    clearTimeout(closeTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => setOpen(true), openDelay);\n  }, [openDelay, setOpen]);\n\n  const handleClose = React.useCallback(() => {\n    clearTimeout(openTimerRef.current);\n    if (!hasSelectionRef.current && !isPointerDownOnContentRef.current) {\n      closeTimerRef.current = window.setTimeout(() => setOpen(false), closeDelay);\n    }\n  }, [closeDelay, setOpen]);\n\n  const handleDismiss = React.useCallback(() => setOpen(false), [setOpen]);\n\n  // cleanup any queued state updates on unmount\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(openTimerRef.current);\n      clearTimeout(closeTimerRef.current);\n    };\n  }, []);\n\n  return (\n    <HoverCardProvider\n      scope={__scopeHoverCard}\n      open={open}\n      onOpenChange={setOpen}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      onDismiss={handleDismiss}\n      hasSelectionRef={hasSelectionRef}\n      isPointerDownOnContentRef={isPointerDownOnContentRef}\n    >\n      <PopperPrimitive.Root {...popperScope}>{children}</PopperPrimitive.Root>\n    </HoverCardProvider>\n  );\n};\n\nHoverCard.displayName = HOVERCARD_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'HoverCardTrigger';\n\ntype HoverCardTriggerElement = React.ElementRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = Radix.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface HoverCardTriggerProps extends PrimitiveLinkProps {}\n\nconst HoverCardTrigger = React.forwardRef<HoverCardTriggerElement, HoverCardTriggerProps>(\n  (props: ScopedProps<HoverCardTriggerProps>, forwardedRef) => {\n    const { __scopeHoverCard, ...triggerProps } = props;\n    const context = useHoverCardContext(TRIGGER_NAME, __scopeHoverCard);\n    const popperScope = usePopperScope(__scopeHoverCard);\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.a\n          data-state={context.open ? 'open' : 'closed'}\n          {...triggerProps}\n          ref={forwardedRef}\n          onPointerEnter={composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen))}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose))}\n          onFocus={composeEventHandlers(props.onFocus, context.onOpen)}\n          onBlur={composeEventHandlers(props.onBlur, context.onClose)}\n          // prevent focus event on touch devices\n          onTouchStart={composeEventHandlers(props.onTouchStart, (event) => event.preventDefault())}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nHoverCardTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'HoverCardPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createHoverCardContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface HoverCardPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst HoverCardPortal: React.FC<HoverCardPortalProps> = (\n  props: ScopedProps<HoverCardPortalProps>\n) => {\n  const { __scopeHoverCard, forceMount, children, container } = props;\n  const context = useHoverCardContext(PORTAL_NAME, __scopeHoverCard);\n  return (\n    <PortalProvider scope={__scopeHoverCard} forceMount={forceMount}>\n      <Presence present={forceMount || context.open}>\n        <PortalPrimitive asChild container={container}>\n          {children}\n        </PortalPrimitive>\n      </Presence>\n    </PortalProvider>\n  );\n};\n\nHoverCardPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'HoverCardContent';\n\ntype HoverCardContentElement = HoverCardContentImplElement;\ninterface HoverCardContentProps extends HoverCardContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst HoverCardContent = React.forwardRef<HoverCardContentElement, HoverCardContentProps>(\n  (props: ScopedProps<HoverCardContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeHoverCard);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useHoverCardContext(CONTENT_NAME, props.__scopeHoverCard);\n    return (\n      <Presence present={forceMount || context.open}>\n        <HoverCardContentImpl\n          data-state={context.open ? 'open' : 'closed'}\n          {...contentProps}\n          onPointerEnter={composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen))}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose))}\n          ref={forwardedRef}\n        />\n      </Presence>\n    );\n  }\n);\n\nHoverCardContent.displayName = CONTENT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype HoverCardContentImplElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype PopperContentProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface HoverCardContentImplProps extends Omit<PopperContentProps, 'onPlaced'> {\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `HoverCard`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n  /**\n   * Event handler called when the focus moves outside of the `HoverCard`.\n   * Can be prevented.\n   */\n  onFocusOutside?: DismissableLayerProps['onFocusOutside'];\n  /**\n   * Event handler called when an interaction happens outside the `HoverCard`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: DismissableLayerProps['onInteractOutside'];\n}\n\nconst HoverCardContentImpl = React.forwardRef<\n  HoverCardContentImplElement,\n  HoverCardContentImplProps\n>((props: ScopedProps<HoverCardContentImplProps>, forwardedRef) => {\n  const {\n    __scopeHoverCard,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    ...contentProps\n  } = props;\n  const context = useHoverCardContext(CONTENT_NAME, __scopeHoverCard);\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const ref = React.useRef<HoverCardContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const [containSelection, setContainSelection] = React.useState(false);\n\n  React.useEffect(() => {\n    if (containSelection) {\n      const body = document.body;\n\n      // Safari requires prefix\n      originalBodyUserSelect = body.style.userSelect || body.style.webkitUserSelect;\n\n      body.style.userSelect = 'none';\n      body.style.webkitUserSelect = 'none';\n      return () => {\n        body.style.userSelect = originalBodyUserSelect;\n        body.style.webkitUserSelect = originalBodyUserSelect;\n      };\n    }\n  }, [containSelection]);\n\n  React.useEffect(() => {\n    if (ref.current) {\n      const handlePointerUp = () => {\n        setContainSelection(false);\n        context.isPointerDownOnContentRef.current = false;\n\n        // Delay a frame to ensure we always access the latest selection\n        setTimeout(() => {\n          const hasSelection = document.getSelection()?.toString() !== '';\n          if (hasSelection) context.hasSelectionRef.current = true;\n        });\n      };\n\n      document.addEventListener('pointerup', handlePointerUp);\n      return () => {\n        document.removeEventListener('pointerup', handlePointerUp);\n        context.hasSelectionRef.current = false;\n        context.isPointerDownOnContentRef.current = false;\n      };\n    }\n  }, [context.isPointerDownOnContentRef, context.hasSelectionRef]);\n\n  React.useEffect(() => {\n    if (ref.current) {\n      const tabbables = getTabbableNodes(ref.current);\n      tabbables.forEach((tabbable) => tabbable.setAttribute('tabindex', '-1'));\n    }\n  });\n\n  return (\n    <DismissableLayer\n      asChild\n      disableOutsidePointerEvents={false}\n      onInteractOutside={onInteractOutside}\n      onEscapeKeyDown={onEscapeKeyDown}\n      onPointerDownOutside={onPointerDownOutside}\n      onFocusOutside={composeEventHandlers(onFocusOutside, (event) => {\n        event.preventDefault();\n      })}\n      onDismiss={context.onDismiss}\n    >\n      <PopperPrimitive.Content\n        {...popperScope}\n        {...contentProps}\n        onPointerDown={composeEventHandlers(contentProps.onPointerDown, (event) => {\n          // Contain selection to current layer\n          if (event.currentTarget.contains(event.target as HTMLElement)) {\n            setContainSelection(true);\n          }\n          context.hasSelectionRef.current = false;\n          context.isPointerDownOnContentRef.current = true;\n        })}\n        ref={composedRefs}\n        style={{\n          ...contentProps.style,\n          userSelect: containSelection ? 'text' : undefined,\n          // Safari requires prefix\n          WebkitUserSelect: containSelection ? 'text' : undefined,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-hover-card-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-hover-card-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-hover-card-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-hover-card-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-hover-card-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    </DismissableLayer>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'HoverCardArrow';\n\ntype HoverCardArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface HoverCardArrowProps extends PopperArrowProps {}\n\nconst HoverCardArrow = React.forwardRef<HoverCardArrowElement, HoverCardArrowProps>(\n  (props: ScopedProps<HoverCardArrowProps>, forwardedRef) => {\n    const { __scopeHoverCard, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeHoverCard);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nHoverCardArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction excludeTouch<E>(eventHandler: () => void) {\n  return (event: React.PointerEvent<E>) =>\n    event.pointerType === 'touch' ? undefined : eventHandler();\n}\n\n/**\n * Returns a list of nodes that can be in the tab sequence.\n * @see: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n */\nfunction getTabbableNodes(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  return nodes;\n}\n\nconst Root = HoverCard;\nconst Trigger = HoverCardTrigger;\nconst Portal = HoverCardPortal;\nconst Content = HoverCardContent;\nconst Arrow = HoverCardArrow;\n\nexport {\n  createHoverCardScope,\n  //\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardPortal,\n  HoverCardContent,\n  HoverCardArrow,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Content,\n  Arrow,\n};\nexport type {\n  HoverCardProps,\n  HoverCardTriggerProps,\n  HoverCardPortalProps,\n  HoverCardContentProps,\n  HoverCardArrowProps,\n};\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/ui/HoverCard.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/ui/HoverCard.tsx\");\n  import.meta.hot.lastModified = \"1706454925344.2874\";\n}\n// REMIX HMR END\n\nimport { HoverCardContentShad, HoverCardShad, HoverCardTriggerShad } from '~/components/ui/shadUi/ui/hover-card';\nexport const HoverCard = ({\n  trigger,\n  content\n}) => {\n  return <HoverCardShad>\n      <HoverCardTriggerShad>{trigger}</HoverCardTriggerShad>\n      <HoverCardContentShad>{content}</HoverCardContentShad>\n    </HoverCardShad>;\n};\n_c = HoverCard;\nvar _c;\n$RefreshReg$(_c, \"HoverCard\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["originalBodyUserSelect", "HOVERCARD_NAME", "createHoverCardContext", "createHoverCardScope", "createContextScope", "createPopperScope", "usePopperScope", "HoverCardProvider", "useHoverCardContext", "HoverCard", "props", "open", "openProp", "closeDelay", "popperScope", "__scopeHoverCard", "openTimerRef", "React", "closeTimerRef", "hasSelectionRef", "isPointerDownOnContentRef", "setOpen", "useControllableState", "prop", "defaultProp", "defaultOpen", "onChange", "onOpenChange", "handleOpen", "clearTimeout", "current", "window", "setTimeout", "openDelay", "handleClose", "handleDismiss", "$eRSIW$createElement", "children", "TRIGGER_NAME", "HoverCardTrigger", "React", "props", "forwardedRef", "triggerProps", "context", "useHoverCardContext", "__scopeHoverCard", "popperScope", "usePopperScope", "$eRSIW$createElement", "open", "composeEventHandlers", "onPointerEnter", "excludeTouch", "onOpen", "onPointerLeave", "onClose", "onFocus", "onBlur", "onTouchStart", "event", "preventDefault", "PORTAL_NAME", "PortalProvider", "usePortalContext", "createHoverCardContext", "forceMount", "undefined", "CONTENT_NAME", "HoverCardContent", "React", "props", "forwardedRef", "portalContext", "usePortalContext", "__scopeHoverCard", "forceMount", "contentProps", "context", "useHoverCardContext", "$eRSIW$createElement", "open", "composeEventHandlers", "onPointerEnter", "excludeTouch", "onOpen", "onPointerLeave", "onClose", "HoverCardContentImpl", "React", "props", "forwardedRef", "contentProps", "context", "useHoverCardContext", "CONTENT_NAME", "__scopeHoverCard", "popperScope", "usePopperScope", "ref", "composedRefs", "useComposedRefs", "containSelection", "setContainSelection", "body", "document", "originalBodyUserSelect", "style", "userSelect", "webkitUserSelect", "current", "handlePointerUp", "isPointerDownOnContentRef", "setTimeout", "hasSelection", "getSelection", "toString", "hasSelectionRef", "addEventListener", "removeEventListener", "tabbables", "getTabbableNodes", "forEach", "tabbable", "setAttribute", "$eRSIW$createElement", "composeEventHandlers", "onFocusOutside", "event", "preventDefault", "onDismiss", "onPointerDown", "currentTarget", "contains", "target", "undefined", "WebkitUserSelect", "excludeTouch", "eventHandler", "event", "pointerType", "undefined", "getTabbableNodes", "container", "nodes", "walker", "document", "createTreeWalker", "NodeFilter", "SHOW_ELEMENT", "acceptNode", "node", "tabIndex", "FILTER_ACCEPT", "FILTER_SKIP", "nextNode", "push", "currentNode", "Root", "HoverCard", "Trigger", "HoverCardTrigger", "Content", "HoverCardContent", "import_jsx_dev_runtime", "_c"]
}
